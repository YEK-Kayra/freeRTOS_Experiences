
001_freeRTOS_FirstSight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab0  08004ab0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00005ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004ab8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          00012f60  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fd0  20012fd0  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de76  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025cd  00000000  00000000  00013f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  000164e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b74  00000000  00000000  000173d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002298b  00000000  00000000  00017f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107d8  00000000  00000000  0003a8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2be3  00000000  00000000  0004b0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011dc8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000441c  00000000  00000000  0011dcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001220ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a28 	.word	0x08004a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004a28 	.word	0x08004a28

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8


	/*! Used to pass a handle to the created task out of the xTaskCreate() function.
	 * pxCreatedTask is optional and can be set to NULL.
	 */
	TaskHandle_t task1_handle = NULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task2_handle = NULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 faa9 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f845 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8a1 	bl	800061c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status_Task =  xTaskCreate(task1_handler, //pxTaskCode, Pointer to the task entry function (just the name of the function that implements the task)
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <main+0x8c>)
 80004e6:	22c8      	movs	r2, #200	@ 0xc8
 80004e8:	4919      	ldr	r1, [pc, #100]	@ (8000550 <main+0x90>)
 80004ea:	481a      	ldr	r0, [pc, #104]	@ (8000554 <main+0x94>)
 80004ec:	f002 f84a 	bl	8002584 <xTaskCreate>
 80004f0:	6178      	str	r0, [r7, #20]
				  200, 						 //usStackDepth	(200*word)
				  "Hello world from Task-1", //pvParameters(pointer to variable's parameter :)
				  2, 						 //uxPriority
				  &task1_handle); 			 //pxCreatedTask, Used to pass a handle to the created task out of the xTaskCreate() function, is optional and can be set to NULL.

  configASSERT(status_Task == pdPASS);		 //pdPASS is equal 1 as decimal
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d00b      	beq.n	8000510 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x4c>


  status_Task =  xTaskCreate(task2_handler,
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <main+0x98>)
 800051a:	22c8      	movs	r2, #200	@ 0xc8
 800051c:	490c      	ldr	r1, [pc, #48]	@ (8000550 <main+0x90>)
 800051e:	480f      	ldr	r0, [pc, #60]	@ (800055c <main+0x9c>)
 8000520:	f002 f830 	bl	8002584 <xTaskCreate>
 8000524:	6178      	str	r0, [r7, #20]
				  200,
				  "Hello world from Task-2",
				  2,
				  &task2_handle);

  configASSERT(status_Task == pdPASS);
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00b      	beq.n	8000544 <main+0x84>
        __asm volatile
 800052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000530:	f383 8811 	msr	BASEPRI, r3
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	f3bf 8f4f 	dsb	sy
 800053c:	60fb      	str	r3, [r7, #12]
    }
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x80>


  vTaskStartScheduler(); //Start freeRTOS scheduler, now we implement our code into our taskx_handler functions
 8000544:	f002 f956 	bl	80027f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x88>
 800054c:	08004a40 	.word	0x08004a40
 8000550:	08004a58 	.word	0x08004a58
 8000554:	0800066d 	.word	0x0800066d
 8000558:	08004a60 	.word	0x08004a60
 800055c:	08000695 	.word	0x08000695

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 ff90 	bl	8004494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <SystemClock_Config+0xb4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <SystemClock_Config+0xb4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <SystemClock_Config+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000618 <SystemClock_Config+0xb8>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fb4b 	bl	8000c6c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005dc:	f000 f880 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fdae 	bl	800115c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000606:	f000 f86b 	bl	80006e0 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a0f      	ldr	r2, [pc, #60]	@ (8000668 <MX_GPIO_Init+0x4c>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *pvParam){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char*)pvParam);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f003 fe2d 	bl	80042d4 <puts>
		taskYIELD();
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <task1_handler+0x24>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)pvParam);
 800068a:	bf00      	nop
 800068c:	e7f2      	b.n	8000674 <task1_handler+0x8>
 800068e:	bf00      	nop
 8000690:	e000ed04 	.word	0xe000ed04

08000694 <task2_handler>:
	}

}


static void task2_handler(void *pvParam){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	while(1){
		printf("%s\n", (char*)pvParam);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f003 fe19 	bl	80042d4 <puts>
		taskYIELD();
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <task2_handler+0x24>)
 80006a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)pvParam);
 80006b2:	bf00      	nop
 80006b4:	e7f2      	b.n	800069c <task2_handler+0x8>
 80006b6:	bf00      	nop
 80006b8:	e000ed04 	.word	0xe000ed04

080006bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ce:	f000 f9cb 	bl	8000a68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40001000 	.word	0x40001000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000700:	6453      	str	r3, [r2, #68]	@ 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	@ 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b33      	ldr	r3, [pc, #204]	@ (8000820 <HAL_InitTick+0xe4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a32      	ldr	r2, [pc, #200]	@ (8000820 <HAL_InitTick+0xe4>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <HAL_InitTick+0xe4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000768:	f107 0210 	add.w	r2, r7, #16
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 febe 	bl	80014f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000782:	f000 fea3 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 8000786:	6378      	str	r0, [r7, #52]	@ 0x34
 8000788:	e004      	b.n	8000794 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800078a:	f000 fe9f 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
 800078e:	4603      	mov	r3, r0
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000796:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <HAL_InitTick+0xe8>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	0c9b      	lsrs	r3, r3, #18
 800079e:	3b01      	subs	r3, #1
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <HAL_InitTick+0xec>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <HAL_InitTick+0xf0>)
 80007a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <HAL_InitTick+0xec>)
 80007aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000828 <HAL_InitTick+0xec>)
 80007b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <HAL_InitTick+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_InitTick+0xec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <HAL_InitTick+0xec>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <HAL_InitTick+0xec>)
 80007ca:	f000 fec5 	bl	8001558 <HAL_TIM_Base_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d11b      	bne.n	8000814 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007dc:	4812      	ldr	r0, [pc, #72]	@ (8000828 <HAL_InitTick+0xec>)
 80007de:	f000 ff15 	bl	800160c <HAL_TIM_Base_Start_IT>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d111      	bne.n	8000814 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007f0:	2036      	movs	r0, #54	@ 0x36
 80007f2:	f000 fa2d 	bl	8000c50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d808      	bhi.n	800080e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	2036      	movs	r0, #54	@ 0x36
 8000802:	f000 fa09 	bl	8000c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_InitTick+0xf4>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	e002      	b.n	8000814 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000818:	4618      	mov	r0, r3
 800081a:	3738      	adds	r7, #56	@ 0x38
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	431bde83 	.word	0x431bde83
 8000828:	2000008c 	.word	0x2000008c
 800082c:	40001000 	.word	0x40001000
 8000830:	20000004 	.word	0x20000004

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <TIM6_DAC_IRQHandler+0x10>)
 8000872:	f000 ff3b 	bl	80016ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000008c 	.word	0x2000008c

08000880 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <ITM_SendChar+0x48>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a0e      	ldr	r2, [pc, #56]	@ (80008c8 <ITM_SendChar+0x48>)
 8000890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000894:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <ITM_SendChar+0x4c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <ITM_SendChar+0x4c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008a2:	bf00      	nop
 80008a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f8      	beq.n	80008a4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008b2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	6013      	str	r3, [r2, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000edfc 	.word	0xe000edfc
 80008cc:	e0000e00 	.word	0xe0000e00

080008d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	e00a      	b.n	80008f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008e2:	f3af 8000 	nop.w
 80008e6:	4601      	mov	r1, r0
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	b2ca      	uxtb	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbf0      	blt.n	80008e2 <_read+0x12>
  }

  return len;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	e009      	b.n	8000930 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffab 	bl	8000880 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf1      	blt.n	800091c <_write+0x12>
  }
  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_close>:

int _close(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800096a:	605a      	str	r2, [r3, #4]
  return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_isatty>:

int _isatty(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f003 fd97 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd5d 	bl	80004c0 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a14:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a1c:	20012fd0 	.word	0x20012fd0

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f8d8 	bl	8000c02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f7ff fe72 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe48 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	200000d4 	.word	0x200000d4

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	200000d4 	.word	0x200000d4

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db0b      	blt.n	8000b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 021f 	and.w	r2, r3, #31
 8000b24:	4907      	ldr	r1, [pc, #28]	@ (8000b44 <__NVIC_EnableIRQ+0x38>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff4c 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2a:	f7ff ff61 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f7ff ffb1 	bl	8000b9c <NVIC_EncodePriority>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff80 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff54 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e267      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d075      	beq.n	8000d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c8a:	4b88      	ldr	r3, [pc, #544]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d00c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c96:	4b85      	ldr	r3, [pc, #532]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d112      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca2:	4b82      	ldr	r3, [pc, #520]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000cae:	d10b      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d05b      	beq.n	8000d74 <HAL_RCC_OscConfig+0x108>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d157      	bne.n	8000d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e242      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd0:	d106      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x74>
 8000cd2:	4b76      	ldr	r3, [pc, #472]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a75      	ldr	r2, [pc, #468]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e01d      	b.n	8000d1c <HAL_RCC_OscConfig+0xb0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x98>
 8000cea:	4b70      	ldr	r3, [pc, #448]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a6f      	ldr	r2, [pc, #444]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e00b      	b.n	8000d1c <HAL_RCC_OscConfig+0xb0>
 8000d04:	4b69      	ldr	r3, [pc, #420]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a68      	ldr	r2, [pc, #416]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b66      	ldr	r3, [pc, #408]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a65      	ldr	r2, [pc, #404]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d013      	beq.n	8000d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff feb4 	bl	8000a90 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d2c:	f7ff feb0 	bl	8000a90 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b64      	cmp	r3, #100	@ 0x64
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e207      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0xc0>
 8000d4a:	e014      	b.n	8000d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff fea0 	bl	8000a90 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff fe9c 	bl	8000a90 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e1f3      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	4b51      	ldr	r3, [pc, #324]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f0      	bne.n	8000d54 <HAL_RCC_OscConfig+0xe8>
 8000d72:	e000      	b.n	8000d76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d063      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d82:	4b4a      	ldr	r3, [pc, #296]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00b      	beq.n	8000da6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d8e:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d11c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9a:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da6:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_RCC_OscConfig+0x152>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d001      	beq.n	8000dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e1c7      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4937      	ldr	r1, [pc, #220]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	e03a      	b.n	8000e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d020      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ddc:	4b34      	ldr	r3, [pc, #208]	@ (8000eb0 <HAL_RCC_OscConfig+0x244>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de2:	f7ff fe55 	bl	8000a90 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dea:	f7ff fe51 	bl	8000a90 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e1a8      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4925      	ldr	r1, [pc, #148]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1e:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_RCC_OscConfig+0x244>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e24:	f7ff fe34 	bl	8000a90 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fe30 	bl	8000a90 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e187      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d036      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d016      	beq.n	8000e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_RCC_OscConfig+0x248>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	f7ff fe14 	bl	8000a90 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e6c:	f7ff fe10 	bl	8000a90 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e167      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_RCC_OscConfig+0x240>)
 8000e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0x200>
 8000e8a:	e01b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_RCC_OscConfig+0x248>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fdfd 	bl	8000a90 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	e00e      	b.n	8000eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fdf9 	bl	8000a90 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d907      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e150      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	42470000 	.word	0x42470000
 8000eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	4b88      	ldr	r3, [pc, #544]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1ea      	bne.n	8000e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8097 	beq.w	8001000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b81      	ldr	r3, [pc, #516]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	4a7c      	ldr	r2, [pc, #496]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f02:	4b77      	ldr	r3, [pc, #476]	@ (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	4b74      	ldr	r3, [pc, #464]	@ (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a73      	ldr	r2, [pc, #460]	@ (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fdb9 	bl	8000a90 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff fdb5 	bl	8000a90 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e10c      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f34:	4b6a      	ldr	r3, [pc, #424]	@ (80010e0 <HAL_RCC_OscConfig+0x474>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <HAL_RCC_OscConfig+0x2ea>
 8000f48:	4b64      	ldr	r3, [pc, #400]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f4c:	4a63      	ldr	r2, [pc, #396]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f54:	e01c      	b.n	8000f90 <HAL_RCC_OscConfig+0x324>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x30c>
 8000f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f62:	4a5e      	ldr	r2, [pc, #376]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0x324>
 8000f78:	4b58      	ldr	r3, [pc, #352]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f7c:	4a57      	ldr	r2, [pc, #348]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f84:	4b55      	ldr	r3, [pc, #340]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f88:	4a54      	ldr	r2, [pc, #336]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000f8a:	f023 0304 	bic.w	r3, r3, #4
 8000f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d015      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f98:	f7ff fd7a 	bl	8000a90 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9e:	e00a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fd76 	bl	8000a90 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e0cb      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	4b49      	ldr	r3, [pc, #292]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0ee      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x334>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fd64 	bl	8000a90 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fca:	e00a      	b.n	8000fe2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd60 	bl	8000a90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e0b5      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1ee      	bne.n	8000fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff4:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	4a38      	ldr	r2, [pc, #224]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8000ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a1 	beq.w	800114c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b08      	cmp	r3, #8
 8001014:	d05c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d141      	bne.n	80010a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101e:	4b31      	ldr	r3, [pc, #196]	@ (80010e4 <HAL_RCC_OscConfig+0x478>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fd34 	bl	8000a90 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fd30 	bl	8000a90 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e087      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103e:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	3b01      	subs	r3, #1
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	491b      	ldr	r1, [pc, #108]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_RCC_OscConfig+0x478>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fd09 	bl	8000a90 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fd05 	bl	8000a90 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e05c      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x416>
 80010a0:	e054      	b.n	800114c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_RCC_OscConfig+0x478>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcf2 	bl	8000a90 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fcee 	bl	8000a90 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e045      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_RCC_OscConfig+0x470>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x444>
 80010ce:	e03d      	b.n	800114c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d107      	bne.n	80010e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e038      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000
 80010e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_RCC_OscConfig+0x4ec>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d028      	beq.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001100:	429a      	cmp	r2, r3
 8001102:	d121      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	429a      	cmp	r2, r3
 8001110:	d11a      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001118:	4013      	ands	r3, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800111e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001120:	4293      	cmp	r3, r2
 8001122:	d111      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	3b01      	subs	r3, #1
 8001132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0cc      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d90c      	bls.n	8001198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b65      	ldr	r3, [pc, #404]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b63      	ldr	r3, [pc, #396]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0b8      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b0:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4a58      	ldr	r2, [pc, #352]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c8:	4b53      	ldr	r3, [pc, #332]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d4:	4b50      	ldr	r3, [pc, #320]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	494d      	ldr	r1, [pc, #308]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d044      	beq.n	800127c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d119      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e07f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001216:	2b03      	cmp	r3, #3
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	4b3f      	ldr	r3, [pc, #252]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e06f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122a:	4b3b      	ldr	r3, [pc, #236]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e067      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f023 0203 	bic.w	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4934      	ldr	r1, [pc, #208]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800124c:	f7ff fc20 	bl	8000a90 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	e00a      	b.n	800126a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7ff fc1c 	bl	8000a90 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e04f      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 020c 	and.w	r2, r3, #12
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	429a      	cmp	r2, r3
 800127a:	d1eb      	bne.n	8001254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800127c:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d20c      	bcs.n	80012a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e032      	b.n	800130a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4916      	ldr	r1, [pc, #88]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	490e      	ldr	r1, [pc, #56]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e2:	f000 f821 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80012e6:	4602      	mov	r2, r0
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	490a      	ldr	r1, [pc, #40]	@ (800131c <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	5ccb      	ldrb	r3, [r1, r3]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_RCC_ClockConfig+0x1c8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fa1a 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00
 8001318:	40023800 	.word	0x40023800
 800131c:	08004a90 	.word	0x08004a90
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b090      	sub	sp, #64	@ 0x40
 800132e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001340:	4b59      	ldr	r3, [pc, #356]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d00d      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x40>
 800134c:	2b08      	cmp	r3, #8
 800134e:	f200 80a1 	bhi.w	8001494 <HAL_RCC_GetSysClockFreq+0x16c>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_RCC_GetSysClockFreq+0x34>
 8001356:	2b04      	cmp	r3, #4
 8001358:	d003      	beq.n	8001362 <HAL_RCC_GetSysClockFreq+0x3a>
 800135a:	e09b      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800135c:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_RCC_GetSysClockFreq+0x184>)
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001360:	e09b      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001362:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001366:	e098      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001368:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001372:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d028      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	099b      	lsrs	r3, r3, #6
 8001384:	2200      	movs	r2, #0
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	627a      	str	r2, [r7, #36]	@ 0x24
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001390:	2100      	movs	r1, #0
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001394:	fb03 f201 	mul.w	r2, r3, r1
 8001398:	2300      	movs	r3, #0
 800139a:	fb00 f303 	mul.w	r3, r0, r3
 800139e:	4413      	add	r3, r2
 80013a0:	4a43      	ldr	r2, [pc, #268]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80013a2:	fba0 1202 	umull	r1, r2, r0, r2
 80013a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013a8:	460a      	mov	r2, r1
 80013aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80013ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013ae:	4413      	add	r3, r2
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b4:	2200      	movs	r2, #0
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	61fa      	str	r2, [r7, #28]
 80013ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013c2:	f7fe ff05 	bl	80001d0 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4613      	mov	r3, r2
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013ce:	e053      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d0:	4b35      	ldr	r3, [pc, #212]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	2200      	movs	r2, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	617a      	str	r2, [r7, #20]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013e2:	f04f 0b00 	mov.w	fp, #0
 80013e6:	4652      	mov	r2, sl
 80013e8:	465b      	mov	r3, fp
 80013ea:	f04f 0000 	mov.w	r0, #0
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	0159      	lsls	r1, r3, #5
 80013f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013f8:	0150      	lsls	r0, r2, #5
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001402:	eb63 090b 	sbc.w	r9, r3, fp
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001412:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001416:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800141a:	ebb2 0408 	subs.w	r4, r2, r8
 800141e:	eb63 0509 	sbc.w	r5, r3, r9
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	00eb      	lsls	r3, r5, #3
 800142c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001430:	00e2      	lsls	r2, r4, #3
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	eb14 030a 	adds.w	r3, r4, sl
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	eb45 030b 	adc.w	r3, r5, fp
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800144e:	4629      	mov	r1, r5
 8001450:	028b      	lsls	r3, r1, #10
 8001452:	4621      	mov	r1, r4
 8001454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001458:	4621      	mov	r1, r4
 800145a:	028a      	lsls	r2, r1, #10
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001462:	2200      	movs	r2, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800146c:	f7fe feb0 	bl	80001d0 <__aeabi_uldivmod>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4613      	mov	r3, r2
 8001476:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800148a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001492:	e002      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001496:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800149c:	4618      	mov	r0, r3
 800149e:	3740      	adds	r7, #64	@ 0x40
 80014a0:	46bd      	mov	sp, r7
 80014a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	00f42400 	.word	0x00f42400
 80014b0:	017d7840 	.word	0x017d7840

080014b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014d0:	f7ff fff0 	bl	80014b4 <HAL_RCC_GetHCLKFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	0a9b      	lsrs	r3, r3, #10
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	08004aa0 	.word	0x08004aa0

080014f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	220f      	movs	r2, #15
 8001502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_RCC_GetClockConfig+0x5c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_RCC_GetClockConfig+0x60>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0207 	and.w	r2, r3, #7
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e041      	b.n	80015ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f839 	bl	80015f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f000 f9c0 	bl	800191c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d001      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e04e      	b.n	80016c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d022      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800164e:	d01d      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d018      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1e      	ldr	r2, [pc, #120]	@ (80016d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_TIM_Base_Start_IT+0xd0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00e      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	@ (80016e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_TIM_Base_Start_IT+0x80>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d111      	bne.n	80016b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b06      	cmp	r3, #6
 800169c:	d010      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0201 	orr.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ae:	e007      	b.n	80016c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40000800 	.word	0x40000800
 80016dc:	40000c00 	.word	0x40000c00
 80016e0:	40010400 	.word	0x40010400
 80016e4:	40014000 	.word	0x40014000
 80016e8:	40001800 	.word	0x40001800

080016ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d020      	beq.n	8001750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01b      	beq.n	8001750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0202 	mvn.w	r2, #2
 8001720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8d2 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 800173c:	e005      	b.n	800174a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8c4 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8d5 	bl	80018f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d020      	beq.n	800179c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0204 	mvn.w	r2, #4
 800176c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8ac 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 8001788:	e005      	b.n	8001796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f89e 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8af 	bl	80018f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d020      	beq.n	80017e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01b      	beq.n	80017e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0208 	mvn.w	r2, #8
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2204      	movs	r2, #4
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f886 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f878 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f889 	bl	80018f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d020      	beq.n	8001834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0210 	mvn.w	r2, #16
 8001804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2208      	movs	r2, #8
 800180a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f860 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 8001820:	e005      	b.n	800182e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f852 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f863 	bl	80018f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0201 	mvn.w	r2, #1
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe ff32 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f906 	bl	8001a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00c      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	d007      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f834 	bl	8001908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0220 	mvn.w	r2, #32
 80018bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8d8 	bl	8001a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <TIM_Base_SetConfig+0x12c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <TIM_Base_SetConfig+0x40>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800193a:	d00f      	beq.n	800195c <TIM_Base_SetConfig+0x40>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a43      	ldr	r2, [pc, #268]	@ (8001a4c <TIM_Base_SetConfig+0x130>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00b      	beq.n	800195c <TIM_Base_SetConfig+0x40>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <TIM_Base_SetConfig+0x134>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <TIM_Base_SetConfig+0x40>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a41      	ldr	r2, [pc, #260]	@ (8001a54 <TIM_Base_SetConfig+0x138>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d003      	beq.n	800195c <TIM_Base_SetConfig+0x40>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a40      	ldr	r2, [pc, #256]	@ (8001a58 <TIM_Base_SetConfig+0x13c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d108      	bne.n	800196e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a35      	ldr	r2, [pc, #212]	@ (8001a48 <TIM_Base_SetConfig+0x12c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197c:	d027      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <TIM_Base_SetConfig+0x130>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d023      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <TIM_Base_SetConfig+0x134>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <TIM_Base_SetConfig+0x138>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01b      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a2f      	ldr	r2, [pc, #188]	@ (8001a58 <TIM_Base_SetConfig+0x13c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d017      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <TIM_Base_SetConfig+0x140>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <TIM_Base_SetConfig+0x144>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00f      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <TIM_Base_SetConfig+0x148>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00b      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a68 <TIM_Base_SetConfig+0x14c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <TIM_Base_SetConfig+0x150>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d003      	beq.n	80019ce <TIM_Base_SetConfig+0xb2>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <TIM_Base_SetConfig+0x154>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d108      	bne.n	80019e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <TIM_Base_SetConfig+0x12c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d003      	beq.n	8001a14 <TIM_Base_SetConfig+0xf8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <TIM_Base_SetConfig+0x13c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d103      	bne.n	8001a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f023 0201 	bic.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800
 8001a54:	40000c00 	.word	0x40000c00
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40014000 	.word	0x40014000
 8001a60:	40014400 	.word	0x40014400
 8001a64:	40014800 	.word	0x40014800
 8001a68:	40001800 	.word	0x40001800
 8001a6c:	40001c00 	.word	0x40001c00
 8001a70:	40002000 	.word	0x40002000

08001a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0208 	add.w	r2, r3, #8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0208 	add.w	r2, r3, #8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 0208 	add.w	r2, r3, #8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d103      	bne.n	8001b5e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e00c      	b.n	8001b78 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3308      	adds	r3, #8
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e002      	b.n	8001b6c <vListInsert+0x2e>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d2f6      	bcs.n	8001b66 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6892      	ldr	r2, [r2, #8]
 8001bc6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6852      	ldr	r2, [r2, #4]
 8001bd0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d103      	bne.n	8001be4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1e5a      	subs	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <xQueueGenericReset+0x2c>
        __asm volatile
 8001c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c1c:	f383 8811 	msr	BASEPRI, r3
 8001c20:	f3bf 8f6f 	isb	sy
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	60bb      	str	r3, [r7, #8]
    }
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001c30:	f001 ff0c 	bl	8003a4c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3c:	68f9      	ldr	r1, [r7, #12]
 8001c3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	441a      	add	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	3b01      	subs	r3, #1
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	441a      	add	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	22ff      	movs	r2, #255	@ 0xff
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	22ff      	movs	r2, #255	@ 0xff
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00f      	beq.n	8001cae <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3310      	adds	r3, #16
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fff2 	bl	8002c7c <xTaskRemoveFromEventList>
 8001c98:	e009      	b.n	8001cae <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fefc 	bl	8001a9c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3324      	adds	r3, #36	@ 0x24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fef7 	bl	8001a9c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001cae:	f001 feff 	bl	8003ab0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	@ 0x30
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10b      	bne.n	8001ce8 <xQueueGenericCreate+0x2c>
        __asm volatile
 8001cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	61bb      	str	r3, [r7, #24]
    }
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <xQueueGenericCreate+0x4a>
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d101      	bne.n	8001d0a <xQueueGenericCreate+0x4e>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <xQueueGenericCreate+0x50>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10b      	bne.n	8001d28 <xQueueGenericCreate+0x6c>
        __asm volatile
 8001d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	617b      	str	r3, [r7, #20]
    }
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001d2e:	d90b      	bls.n	8001d48 <xQueueGenericCreate+0x8c>
        __asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	613b      	str	r3, [r7, #16]
    }
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	3350      	adds	r3, #80	@ 0x50
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 ffa7 	bl	8003ca0 <pvPortMalloc>
 8001d52:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3350      	adds	r3, #80	@ 0x50
 8001d62:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f805 	bl	8001d80 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3728      	adds	r7, #40	@ 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e002      	b.n	8001da2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001dae:	2101      	movs	r1, #1
 8001db0:	69b8      	ldr	r0, [r7, #24]
 8001db2:	f7ff ff27 	bl	8001c04 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	@ 0x38
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8001dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <xQueueGenericSend+0x34>
        __asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <xQueueGenericSend+0x42>
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <xQueueGenericSend+0x46>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <xQueueGenericSend+0x48>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10b      	bne.n	8001e2c <xQueueGenericSend+0x64>
        __asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d103      	bne.n	8001e3a <xQueueGenericSend+0x72>
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <xQueueGenericSend+0x76>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <xQueueGenericSend+0x78>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <xQueueGenericSend+0x94>
        __asm volatile
 8001e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	623b      	str	r3, [r7, #32]
    }
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e5c:	f001 f8a8 	bl	8002fb0 <xTaskGetSchedulerState>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <xQueueGenericSend+0xa4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <xQueueGenericSend+0xa8>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <xQueueGenericSend+0xaa>
 8001e70:	2300      	movs	r3, #0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10b      	bne.n	8001e8e <xQueueGenericSend+0xc6>
        __asm volatile
 8001e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	61fb      	str	r3, [r7, #28]
    }
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	e7fd      	b.n	8001e8a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e8e:	f001 fddd 	bl	8003a4c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <xQueueGenericSend+0xdc>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d112      	bne.n	8001eca <xQueueGenericSend+0x102>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001eaa:	f000 f9fd 	bl	80022a8 <prvCopyDataToQueue>
 8001eae:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	3324      	adds	r3, #36	@ 0x24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fedd 	bl	8002c7c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001ec2:	f001 fdf5 	bl	8003ab0 <vPortExitCritical>
                return pdPASS;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e062      	b.n	8001f90 <xQueueGenericSend+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <xQueueGenericSend+0x110>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ed0:	f001 fdee 	bl	8003ab0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e05b      	b.n	8001f90 <xQueueGenericSend+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <xQueueGenericSend+0x124>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ff2e 	bl	8002d44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001eec:	f001 fde0 	bl	8003ab0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ef0:	f000 fcd2 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001ef4:	f001 fdaa 	bl	8003a4c <vPortEnterCritical>
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d103      	bne.n	8001f0e <xQueueGenericSend+0x146>
 8001f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1a:	d103      	bne.n	8001f24 <xQueueGenericSend+0x15c>
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f24:	f001 fdc4 	bl	8003ab0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f28:	1d3a      	adds	r2, r7, #4
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 ff1d 	bl	8002d70 <xTaskCheckForTimeOut>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d123      	bne.n	8001f84 <xQueueGenericSend+0x1bc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f3e:	f000 faab 	bl	8002498 <prvIsQueueFull>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d017      	beq.n	8001f78 <xQueueGenericSend+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fe41 	bl	8002bd8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001f56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f58:	f000 fa36 	bl	80023c8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001f5c:	f000 fcaa 	bl	80028b4 <xTaskResumeAll>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d193      	bne.n	8001e8e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <xQueueGenericSend+0x1d0>)
 8001f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	e78a      	b.n	8001e8e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f7a:	f000 fa25 	bl	80023c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f7e:	f000 fc99 	bl	80028b4 <xTaskResumeAll>
 8001f82:	e784      	b.n	8001e8e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f86:	f000 fa1f 	bl	80023c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f8a:	f000 fc93 	bl	80028b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001f8e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3738      	adds	r7, #56	@ 0x38
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	e000ed04 	.word	0xe000ed04

08001f9c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b090      	sub	sp, #64	@ 0x40
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8001fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <xQueueGenericSendFromISR+0x3e>
 8001fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <xQueueGenericSendFromISR+0x42>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <xQueueGenericSendFromISR+0x44>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d103      	bne.n	800200a <xQueueGenericSendFromISR+0x6e>
 8002002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <xQueueGenericSendFromISR+0x72>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <xQueueGenericSendFromISR+0x74>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	623b      	str	r3, [r7, #32]
    }
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800202c:	f001 fdf6 	bl	8003c1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002030:	f3ef 8211 	mrs	r2, BASEPRI
 8002034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	61fa      	str	r2, [r7, #28]
 8002046:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002048:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800204c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800204e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <xQueueGenericSendFromISR+0xc2>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d13f      	bne.n	80020de <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002064:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002074:	f000 f918 	bl	80022a8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002078:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d112      	bne.n	80020a8 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	2b00      	cmp	r3, #0
 8002088:	d026      	beq.n	80020d8 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	3324      	adds	r3, #36	@ 0x24
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fdf4 	bl	8002c7c <xTaskRemoveFromEventList>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01e      	beq.n	80020d8 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e017      	b.n	80020d8 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80020a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80020ae:	d10b      	bne.n	80020c8 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80020b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	617b      	str	r3, [r7, #20]
    }
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80020d8:	2301      	movs	r3, #1
 80020da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80020dc:	e001      	b.n	80020e2 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80020ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80020ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3740      	adds	r7, #64	@ 0x40
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	@ 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <xQueueReceive+0x32>
        __asm volatile
 8002112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	623b      	str	r3, [r7, #32]
    }
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	e7fd      	b.n	8002126 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <xQueueReceive+0x40>
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <xQueueReceive+0x44>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <xQueueReceive+0x46>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10b      	bne.n	800215a <xQueueReceive+0x62>
        __asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	61fb      	str	r3, [r7, #28]
    }
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	e7fd      	b.n	8002156 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800215a:	f000 ff29 	bl	8002fb0 <xTaskGetSchedulerState>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <xQueueReceive+0x72>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <xQueueReceive+0x76>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueReceive+0x78>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <xQueueReceive+0x94>
        __asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61bb      	str	r3, [r7, #24]
    }
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800218c:	f001 fc5e 	bl	8003a4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d014      	beq.n	80021c6 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021a0:	f000 f8ec 	bl	800237c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	3310      	adds	r3, #16
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fd5f 	bl	8002c7c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80021be:	f001 fc77 	bl	8003ab0 <vPortExitCritical>
                return pdPASS;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e069      	b.n	800229a <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d103      	bne.n	80021d4 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80021cc:	f001 fc70 	bl	8003ab0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e062      	b.n	800229a <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80021d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fdb0 	bl	8002d44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80021e4:	2301      	movs	r3, #1
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80021e8:	f001 fc62 	bl	8003ab0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80021ec:	f000 fb54 	bl	8002898 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80021f0:	f001 fc2c 	bl	8003a4c <vPortEnterCritical>
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d103      	bne.n	800220a <xQueueReceive+0x112>
 8002202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002210:	b25b      	sxtb	r3, r3
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d103      	bne.n	8002220 <xQueueReceive+0x128>
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002220:	f001 fc46 	bl	8003ab0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002224:	1d3a      	adds	r2, r7, #4
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fd9f 	bl	8002d70 <xTaskCheckForTimeOut>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d123      	bne.n	8002280 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800223a:	f000 f917 	bl	800246c <prvIsQueueEmpty>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d017      	beq.n	8002274 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002246:	3324      	adds	r3, #36	@ 0x24
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fcc3 	bl	8002bd8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002254:	f000 f8b8 	bl	80023c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002258:	f000 fb2c 	bl	80028b4 <xTaskResumeAll>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d194      	bne.n	800218c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <xQueueReceive+0x1ac>)
 8002264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	e78b      	b.n	800218c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002276:	f000 f8a7 	bl	80023c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800227a:	f000 fb1b 	bl	80028b4 <xTaskResumeAll>
 800227e:	e785      	b.n	800218c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002282:	f000 f8a1 	bl	80023c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002286:	f000 fb15 	bl	80028b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800228a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800228c:	f000 f8ee 	bl	800246c <prvIsQueueEmpty>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f43f af7a 	beq.w	800218c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002298:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800229a:	4618      	mov	r0, r3
 800229c:	3730      	adds	r7, #48	@ 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000ed04 	.word	0xe000ed04

080022a8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10d      	bne.n	80022e2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d14d      	bne.n	800236a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fe8a 	bl	8002fec <xTaskPriorityDisinherit>
 80022d8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	e043      	b.n	800236a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d119      	bne.n	800231c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6858      	ldr	r0, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	461a      	mov	r2, r3
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	f002 f943 	bl	800457e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	441a      	add	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	d32b      	bcc.n	800236a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	e026      	b.n	800236a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68d8      	ldr	r0, [r3, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	461a      	mov	r2, r3
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	f002 f929 	bl	800457e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	425b      	negs	r3, r3
 8002336:	441a      	add	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d207      	bcs.n	8002358 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	425b      	negs	r3, r3
 8002352:	441a      	add	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d105      	bne.n	800236a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	3b01      	subs	r3, #1
 8002368:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002372:	697b      	ldr	r3, [r7, #20]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d018      	beq.n	80023c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d303      	bcc.n	80023b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68d9      	ldr	r1, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	461a      	mov	r2, r3
 80023ba:	6838      	ldr	r0, [r7, #0]
 80023bc:	f002 f8df 	bl	800457e <memcpy>
    }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80023d0:	f001 fb3c 	bl	8003a4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023dc:	e011      	b.n	8002402 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3324      	adds	r3, #36	@ 0x24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fc46 	bl	8002c7c <xTaskRemoveFromEventList>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80023f6:	f000 fd23 	bl	8002e40 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	2b00      	cmp	r3, #0
 8002408:	dce9      	bgt.n	80023de <prvUnlockQueue+0x16>
 800240a:	e000      	b.n	800240e <prvUnlockQueue+0x46>
                        break;
 800240c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	22ff      	movs	r2, #255	@ 0xff
 8002412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002416:	f001 fb4b 	bl	8003ab0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800241a:	f001 fb17 	bl	8003a4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002424:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002426:	e011      	b.n	800244c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3310      	adds	r3, #16
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fc21 	bl	8002c7c <xTaskRemoveFromEventList>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002440:	f000 fcfe 	bl	8002e40 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	3b01      	subs	r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800244c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002450:	2b00      	cmp	r3, #0
 8002452:	dce9      	bgt.n	8002428 <prvUnlockQueue+0x60>
 8002454:	e000      	b.n	8002458 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002456:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	22ff      	movs	r2, #255	@ 0xff
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002460:	f001 fb26 	bl	8003ab0 <vPortExitCritical>
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002474:	f001 faea 	bl	8003a4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002480:	2301      	movs	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e001      	b.n	800248a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800248a:	f001 fb11 	bl	8003ab0 <vPortExitCritical>

    return xReturn;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024a0:	f001 fad4 	bl	8003a4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d102      	bne.n	80024b6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e001      	b.n	80024ba <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80024ba:	f001 faf9 	bl	8003ab0 <vPortExitCritical>

    return xReturn;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e014      	b.n	8002502 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002518 <vQueueAddToRegistry+0x50>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <vQueueAddToRegistry+0x50>)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <vQueueAddToRegistry+0x50>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80024fa:	e006      	b.n	800250a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3301      	adds	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b07      	cmp	r3, #7
 8002506:	d9e7      	bls.n	80024d8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200000d8 	.word	0x200000d8

0800251c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800252c:	f001 fa8e 	bl	8003a4c <vPortEnterCritical>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <vQueueWaitForMessageRestricted+0x2a>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d103      	bne.n	800255c <vQueueWaitForMessageRestricted+0x40>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800255c:	f001 faa8 	bl	8003ab0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3324      	adds	r3, #36	@ 0x24
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb57 	bl	8002c24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff26 	bl	80023c8 <prvUnlockQueue>
    }
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	@ 0x30
 8002588:	af04      	add	r7, sp, #16
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f001 fb81 	bl	8003ca0 <pvPortMalloc>
 800259e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025a6:	2058      	movs	r0, #88	@ 0x58
 80025a8:	f001 fb7a 	bl	8003ca0 <pvPortMalloc>
 80025ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80025ba:	e005      	b.n	80025c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f001 fc51 	bl	8003e64 <vPortFree>
 80025c2:	e001      	b.n	80025c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9303      	str	r3, [sp, #12]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f80e 	bl	8002606 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025ea:	69f8      	ldr	r0, [r7, #28]
 80025ec:	f000 f8a2 	bl	8002734 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e002      	b.n	80025fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025fc:	69bb      	ldr	r3, [r7, #24]
    }
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b088      	sub	sp, #32
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	461a      	mov	r2, r3
 800261e:	21a5      	movs	r1, #165	@ 0xa5
 8002620:	f001 ff38 	bl	8004494 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800262e:	3b01      	subs	r3, #1
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f023 0307 	bic.w	r3, r3, #7
 800263c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	617b      	str	r3, [r7, #20]
    }
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01f      	beq.n	80026a6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e012      	b.n	8002692 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	7819      	ldrb	r1, [r3, #0]
 8002674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	3334      	adds	r3, #52	@ 0x34
 800267c:	460a      	mov	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b09      	cmp	r3, #9
 8002696:	d9e9      	bls.n	800266c <prvInitialiseNewTask+0x66>
 8002698:	e000      	b.n	800269c <prvInitialiseNewTask+0x96>
            {
                break;
 800269a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800269c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026a4:	e003      	b.n	80026ae <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d901      	bls.n	80026b8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026b4:	2304      	movs	r3, #4
 80026b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80026be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	2200      	movs	r2, #0
 80026c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	3304      	adds	r3, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fa04 	bl	8001adc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	3318      	adds	r3, #24
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f9ff 	bl	8001adc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	f1c3 0205 	rsb	r2, r3, #5
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	3350      	adds	r3, #80	@ 0x50
 80026f8:	2204      	movs	r2, #4
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fec9 	bl	8004494 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	3354      	adds	r3, #84	@ 0x54
 8002706:	2201      	movs	r2, #1
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fec2 	bl	8004494 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	68f9      	ldr	r1, [r7, #12]
 8002714:	69b8      	ldr	r0, [r7, #24]
 8002716:	f001 f869 	bl	80037ec <pxPortInitialiseStack>
 800271a:	4602      	mov	r2, r0
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800272a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800272c:	bf00      	nop
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800273c:	f001 f986 	bl	8003a4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002740:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <prvAddNewTaskToReadyList+0xa8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <prvAddNewTaskToReadyList+0xa8>)
 8002748:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <prvAddNewTaskToReadyList+0xac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002752:	4a23      	ldr	r2, [pc, #140]	@ (80027e0 <prvAddNewTaskToReadyList+0xac>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002758:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <prvAddNewTaskToReadyList+0xa8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d110      	bne.n	8002782 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002760:	f000 fb8c 	bl	8002e7c <prvInitialiseTaskLists>
 8002764:	e00d      	b.n	8002782 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002766:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <prvAddNewTaskToReadyList+0xb0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <prvAddNewTaskToReadyList+0xac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	429a      	cmp	r2, r3
 800277a:	d802      	bhi.n	8002782 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800277c:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <prvAddNewTaskToReadyList+0xac>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <prvAddNewTaskToReadyList+0xb4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <prvAddNewTaskToReadyList+0xb4>)
 800278a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <prvAddNewTaskToReadyList+0xb4>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <prvAddNewTaskToReadyList+0xb8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <prvAddNewTaskToReadyList+0xb8>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a0f      	ldr	r2, [pc, #60]	@ (80027f0 <prvAddNewTaskToReadyList+0xbc>)
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f7ff f99a 	bl	8001af6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027c2:	f001 f975 	bl	8003ab0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <prvAddNewTaskToReadyList+0xb0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <prvAddNewTaskToReadyList+0xac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200001f0 	.word	0x200001f0
 80027e0:	20000118 	.word	0x20000118
 80027e4:	200001fc 	.word	0x200001fc
 80027e8:	2000020c 	.word	0x2000020c
 80027ec:	200001f8 	.word	0x200001f8
 80027f0:	2000011c 	.word	0x2000011c

080027f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <vTaskStartScheduler+0x88>)
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2300      	movs	r3, #0
 8002804:	2282      	movs	r2, #130	@ 0x82
 8002806:	491e      	ldr	r1, [pc, #120]	@ (8002880 <vTaskStartScheduler+0x8c>)
 8002808:	481e      	ldr	r0, [pc, #120]	@ (8002884 <vTaskStartScheduler+0x90>)
 800280a:	f7ff febb 	bl	8002584 <xTaskCreate>
 800280e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002816:	f000 fccb 	bl	80031b0 <xTimerCreateTimerTask>
 800281a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d116      	bne.n	8002850 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	60bb      	str	r3, [r7, #8]
    }
 8002834:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <vTaskStartScheduler+0x94>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <vTaskStartScheduler+0x98>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <vTaskStartScheduler+0x9c>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800284a:	f001 f85b 	bl	8003904 <xPortStartScheduler>
 800284e:	e00f      	b.n	8002870 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d10b      	bne.n	8002870 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	607b      	str	r3, [r7, #4]
    }
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002870:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <vTaskStartScheduler+0xa0>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000214 	.word	0x20000214
 8002880:	08004a78 	.word	0x08004a78
 8002884:	08002e59 	.word	0x08002e59
 8002888:	20000210 	.word	0x20000210
 800288c:	200001fc 	.word	0x200001fc
 8002890:	200001f4 	.word	0x200001f4
 8002894:	2000000c 	.word	0x2000000c

08002898 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <vTaskSuspendAll+0x18>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	4a03      	ldr	r2, [pc, #12]	@ (80028b0 <vTaskSuspendAll+0x18>)
 80028a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	20000218 	.word	0x20000218

080028b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028c2:	4b3c      	ldr	r3, [pc, #240]	@ (80029b4 <xTaskResumeAll+0x100>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <xTaskResumeAll+0x2e>
        __asm volatile
 80028ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	603b      	str	r3, [r7, #0]
    }
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	e7fd      	b.n	80028de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028e2:	f001 f8b3 	bl	8003a4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028e6:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <xTaskResumeAll+0x100>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <xTaskResumeAll+0x100>)
 80028ee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028f0:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <xTaskResumeAll+0x100>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d155      	bne.n	80029a4 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028f8:	4b2f      	ldr	r3, [pc, #188]	@ (80029b8 <xTaskResumeAll+0x104>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d051      	beq.n	80029a4 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002900:	e02e      	b.n	8002960 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002902:	4b2e      	ldr	r3, [pc, #184]	@ (80029bc <xTaskResumeAll+0x108>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3318      	adds	r3, #24
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f94e 	bl	8001bb0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3304      	adds	r3, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f949 	bl	8001bb0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <xTaskResumeAll+0x10c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <xTaskResumeAll+0x10c>)
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <xTaskResumeAll+0x110>)
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7ff f8d5 	bl	8001af6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <xTaskResumeAll+0x114>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800295a:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <xTaskResumeAll+0x118>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002960:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <xTaskResumeAll+0x108>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1cc      	bne.n	8002902 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800296e:	f000 fb03 	bl	8002f78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002972:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <xTaskResumeAll+0x11c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800297e:	f000 f839 	bl	80029f4 <xTaskIncrementTick>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002988:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <xTaskResumeAll+0x118>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3b01      	subs	r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f1      	bne.n	800297e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <xTaskResumeAll+0x11c>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <xTaskResumeAll+0x118>)
 80029a2:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029a4:	f001 f884 	bl	8003ab0 <vPortExitCritical>

    return xAlreadyYielded;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000218 	.word	0x20000218
 80029b8:	200001f0 	.word	0x200001f0
 80029bc:	200001b0 	.word	0x200001b0
 80029c0:	200001f8 	.word	0x200001f8
 80029c4:	2000011c 	.word	0x2000011c
 80029c8:	20000118 	.word	0x20000118
 80029cc:	20000204 	.word	0x20000204
 80029d0:	20000200 	.word	0x20000200

080029d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80029da:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <xTaskGetTickCount+0x1c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80029e0:	687b      	ldr	r3, [r7, #4]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200001f4 	.word	0x200001f4

080029f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <xTaskIncrementTick+0x108>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d170      	bne.n	8002ae8 <xTaskIncrementTick+0xf4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a06:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <xTaskIncrementTick+0x10c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b00 <xTaskIncrementTick+0x10c>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d121      	bne.n	8002a5e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <xTaskIncrementTick+0x110>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <xTaskIncrementTick+0x48>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	603b      	str	r3, [r7, #0]
    }
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <xTaskIncrementTick+0x44>
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <xTaskIncrementTick+0x110>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <xTaskIncrementTick+0x114>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	@ (8002b04 <xTaskIncrementTick+0x110>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b08 <xTaskIncrementTick+0x114>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <xTaskIncrementTick+0x118>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <xTaskIncrementTick+0x118>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	f000 fa8d 	bl	8002f78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <xTaskIncrementTick+0x11c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d344      	bcc.n	8002af2 <xTaskIncrementTick+0xfe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a68:	4b26      	ldr	r3, [pc, #152]	@ (8002b04 <xTaskIncrementTick+0x110>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a72:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <xTaskIncrementTick+0x11c>)
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	601a      	str	r2, [r3, #0]
                    break;
 8002a7a:	e03a      	b.n	8002af2 <xTaskIncrementTick+0xfe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a7c:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <xTaskIncrementTick+0x110>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d203      	bcs.n	8002a9c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a94:	4a1e      	ldr	r2, [pc, #120]	@ (8002b10 <xTaskIncrementTick+0x11c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a9a:	e02a      	b.n	8002af2 <xTaskIncrementTick+0xfe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f885 	bl	8001bb0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3318      	adds	r3, #24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f87c 	bl	8001bb0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	2201      	movs	r2, #1
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <xTaskIncrementTick+0x120>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <xTaskIncrementTick+0x120>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4a10      	ldr	r2, [pc, #64]	@ (8002b18 <xTaskIncrementTick+0x124>)
 8002ad8:	441a      	add	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3304      	adds	r3, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f7ff f808 	bl	8001af6 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae6:	e7bf      	b.n	8002a68 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <xTaskIncrementTick+0x128>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <xTaskIncrementTick+0x128>)
 8002af0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002af2:	697b      	ldr	r3, [r7, #20]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000218 	.word	0x20000218
 8002b00:	200001f4 	.word	0x200001f4
 8002b04:	200001a8 	.word	0x200001a8
 8002b08:	200001ac 	.word	0x200001ac
 8002b0c:	20000208 	.word	0x20000208
 8002b10:	20000210 	.word	0x20000210
 8002b14:	200001f8 	.word	0x200001f8
 8002b18:	2000011c 	.word	0x2000011c
 8002b1c:	20000200 	.word	0x20000200

08002b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b26:	4b27      	ldr	r3, [pc, #156]	@ (8002bc4 <vTaskSwitchContext+0xa4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b2e:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <vTaskSwitchContext+0xa8>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b34:	e040      	b.n	8002bb8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002b36:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <vTaskSwitchContext+0xa8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3c:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <vTaskSwitchContext+0xac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f1c3 031f 	rsb	r3, r3, #31
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	491f      	ldr	r1, [pc, #124]	@ (8002bd0 <vTaskSwitchContext+0xb0>)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <vTaskSwitchContext+0x5e>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
    }
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <vTaskSwitchContext+0x5a>
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <vTaskSwitchContext+0xb0>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d104      	bne.n	8002bae <vTaskSwitchContext+0x8e>
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <vTaskSwitchContext+0xb4>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	20000218 	.word	0x20000218
 8002bc8:	20000204 	.word	0x20000204
 8002bcc:	200001f8 	.word	0x200001f8
 8002bd0:	2000011c 	.word	0x2000011c
 8002bd4:	20000118 	.word	0x20000118

08002bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60fb      	str	r3, [r7, #12]
    }
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <vTaskPlaceOnEventList+0x48>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3318      	adds	r3, #24
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fe ff98 	bl	8001b3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c0e:	2101      	movs	r1, #1
 8002c10:	6838      	ldr	r0, [r7, #0]
 8002c12:	f000 fa67 	bl	80030e4 <prvAddCurrentTaskToDelayedList>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000118 	.word	0x20000118

08002c24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	617b      	str	r3, [r7, #20]
    }
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <vTaskPlaceOnEventListRestricted+0x54>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3318      	adds	r3, #24
 8002c54:	4619      	mov	r1, r3
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7fe ff4d 	bl	8001af6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	f000 fa3a 	bl	80030e4 <prvAddCurrentTaskToDelayedList>
    }
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000118 	.word	0x20000118

08002c7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	60fb      	str	r3, [r7, #12]
    }
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3318      	adds	r3, #24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff7e 	bl	8001bb0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <xTaskRemoveFromEventList+0xb0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11c      	bne.n	8002cf6 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ff75 	bl	8001bb0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <xTaskRemoveFromEventList+0xb4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <xTaskRemoveFromEventList+0xb4>)
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <xTaskRemoveFromEventList+0xb8>)
 8002ce6:	441a      	add	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7fe ff01 	bl	8001af6 <vListInsertEnd>
 8002cf4:	e005      	b.n	8002d02 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	480e      	ldr	r0, [pc, #56]	@ (8002d38 <xTaskRemoveFromEventList+0xbc>)
 8002cfe:	f7fe fefa 	bl	8001af6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <xTaskRemoveFromEventList+0xc0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d905      	bls.n	8002d1c <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <xTaskRemoveFromEventList+0xc4>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e001      	b.n	8002d20 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002d20:	697b      	ldr	r3, [r7, #20]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000218 	.word	0x20000218
 8002d30:	200001f8 	.word	0x200001f8
 8002d34:	2000011c 	.word	0x2000011c
 8002d38:	200001b0 	.word	0x200001b0
 8002d3c:	20000118 	.word	0x20000118
 8002d40:	20000204 	.word	0x20000204

08002d44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <vTaskInternalSetTimeOutState+0x24>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <vTaskInternalSetTimeOutState+0x28>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000208 	.word	0x20000208
 8002d6c:	200001f4 	.word	0x200001f4

08002d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
    }
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	60fb      	str	r3, [r7, #12]
    }
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8002db6:	f000 fe49 	bl	8003a4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002dba:	4b1f      	ldr	r3, [pc, #124]	@ (8002e38 <xTaskCheckForTimeOut+0xc8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d102      	bne.n	8002dda <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e026      	b.n	8002e28 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <xTaskCheckForTimeOut+0xcc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d00a      	beq.n	8002dfc <xTaskCheckForTimeOut+0x8c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d305      	bcc.n	8002dfc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e015      	b.n	8002e28 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d20b      	bcs.n	8002e1e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ff96 	bl	8002d44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e004      	b.n	8002e28 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002e28:	f000 fe42 	bl	8003ab0 <vPortExitCritical>

    return xReturn;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200001f4 	.word	0x200001f4
 8002e3c:	20000208 	.word	0x20000208

08002e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <vTaskMissedYield+0x14>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000204 	.word	0x20000204

08002e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e60:	f000 f84c 	bl	8002efc <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <prvIdleTask+0x20>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e74:	bf00      	nop
 8002e76:	e7f3      	b.n	8002e60 <prvIdleTask+0x8>
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	e00c      	b.n	8002ea2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <prvInitialiseTaskLists+0x60>)
 8002e94:	4413      	add	r3, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe00 	bl	8001a9c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d9ef      	bls.n	8002e88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ea8:	480d      	ldr	r0, [pc, #52]	@ (8002ee0 <prvInitialiseTaskLists+0x64>)
 8002eaa:	f7fe fdf7 	bl	8001a9c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002eae:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <prvInitialiseTaskLists+0x68>)
 8002eb0:	f7fe fdf4 	bl	8001a9c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <prvInitialiseTaskLists+0x6c>)
 8002eb6:	f7fe fdf1 	bl	8001a9c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002eba:	480c      	ldr	r0, [pc, #48]	@ (8002eec <prvInitialiseTaskLists+0x70>)
 8002ebc:	f7fe fdee 	bl	8001a9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ec0:	480b      	ldr	r0, [pc, #44]	@ (8002ef0 <prvInitialiseTaskLists+0x74>)
 8002ec2:	f7fe fdeb 	bl	8001a9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <prvInitialiseTaskLists+0x78>)
 8002ec8:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <prvInitialiseTaskLists+0x64>)
 8002eca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <prvInitialiseTaskLists+0x7c>)
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <prvInitialiseTaskLists+0x68>)
 8002ed0:	601a      	str	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000011c 	.word	0x2000011c
 8002ee0:	20000180 	.word	0x20000180
 8002ee4:	20000194 	.word	0x20000194
 8002ee8:	200001b0 	.word	0x200001b0
 8002eec:	200001c4 	.word	0x200001c4
 8002ef0:	200001dc 	.word	0x200001dc
 8002ef4:	200001a8 	.word	0x200001a8
 8002ef8:	200001ac 	.word	0x200001ac

08002efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f02:	e019      	b.n	8002f38 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f04:	f000 fda2 	bl	8003a4c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f08:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <prvCheckTasksWaitingTermination+0x50>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fe4b 	bl	8001bb0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <prvCheckTasksWaitingTermination+0x54>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	4a0b      	ldr	r2, [pc, #44]	@ (8002f50 <prvCheckTasksWaitingTermination+0x54>)
 8002f22:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <prvCheckTasksWaitingTermination+0x58>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <prvCheckTasksWaitingTermination+0x58>)
 8002f2c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f2e:	f000 fdbf 	bl	8003ab0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f810 	bl	8002f58 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <prvCheckTasksWaitingTermination+0x58>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e1      	bne.n	8002f04 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200001c4 	.word	0x200001c4
 8002f50:	200001f0 	.word	0x200001f0
 8002f54:	200001d8 	.word	0x200001d8

08002f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ff7d 	bl	8003e64 <vPortFree>
                vPortFree( pxTCB );
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 ff7a 	bl	8003e64 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <prvResetNextTaskUnblockTime+0x30>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <prvResetNextTaskUnblockTime+0x34>)
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f8e:	e005      	b.n	8002f9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <prvResetNextTaskUnblockTime+0x30>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <prvResetNextTaskUnblockTime+0x34>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200001a8 	.word	0x200001a8
 8002fac:	20000210 	.word	0x20000210

08002fb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <xTaskGetSchedulerState+0x34>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	e008      	b.n	8002fd6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <xTaskGetSchedulerState+0x38>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	e001      	b.n	8002fd6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fd6:	687b      	ldr	r3, [r7, #4]
    }
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	200001fc 	.word	0x200001fc
 8002fe8:	20000218 	.word	0x20000218

08002fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d065      	beq.n	80030ce <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003002:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <xTaskPriorityDisinherit+0xec>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d00b      	beq.n	8003024 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60fb      	str	r3, [r7, #12]
    }
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60bb      	str	r3, [r7, #8]
    }
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	429a      	cmp	r2, r3
 8003058:	d039      	beq.n	80030ce <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d135      	bne.n	80030ce <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3304      	adds	r3, #4
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fda2 	bl	8001bb0 <uxListRemove>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43da      	mvns	r2, r3
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <xTaskPriorityDisinherit+0xf0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4013      	ands	r3, r2
 8003084:	4a15      	ldr	r2, [pc, #84]	@ (80030dc <xTaskPriorityDisinherit+0xf0>)
 8003086:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f1c3 0205 	rsb	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <xTaskPriorityDisinherit+0xf0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <xTaskPriorityDisinherit+0xf0>)
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <xTaskPriorityDisinherit+0xf4>)
 80030bc:	441a      	add	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f7fe fd16 	bl	8001af6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
    }
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000118 	.word	0x20000118
 80030dc:	200001f8 	.word	0x200001f8
 80030e0:	2000011c 	.word	0x2000011c

080030e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030ee:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fd58 	bl	8001bb0 <uxListRemove>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003106:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4013      	ands	r3, r2
 800311a:	4a20      	ldr	r2, [pc, #128]	@ (800319c <prvAddCurrentTaskToDelayedList+0xb8>)
 800311c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d10a      	bne.n	800313c <prvAddCurrentTaskToDelayedList+0x58>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	481a      	ldr	r0, [pc, #104]	@ (80031a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003136:	f7fe fcde 	bl	8001af6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800313a:	e026      	b.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d209      	bcs.n	8003168 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fe fcec 	bl	8001b3e <vListInsert>
}
 8003166:	e010      	b.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003168:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f7fe fce2 	bl	8001b3e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800317a:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d202      	bcs.n	800318a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003184:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6013      	str	r3, [r2, #0]
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200001f4 	.word	0x200001f4
 8003198:	20000118 	.word	0x20000118
 800319c:	200001f8 	.word	0x200001f8
 80031a0:	200001dc 	.word	0x200001dc
 80031a4:	200001ac 	.word	0x200001ac
 80031a8:	200001a8 	.word	0x200001a8
 80031ac:	20000210 	.word	0x20000210

080031b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80031ba:	f000 fae1 	bl	8003780 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <xTimerCreateTimerTask+0x58>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <xTimerCreateTimerTask+0x5c>)
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <xTimerCreateTimerTask+0x60>)
 80031d6:	480f      	ldr	r0, [pc, #60]	@ (8003214 <xTimerCreateTimerTask+0x64>)
 80031d8:	f7ff f9d4 	bl	8002584 <xTaskCreate>
 80031dc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	603b      	str	r3, [r7, #0]
    }
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80031fc:	687b      	ldr	r3, [r7, #4]
    }
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000024c 	.word	0x2000024c
 800320c:	20000250 	.word	0x20000250
 8003210:	08004a80 	.word	0x08004a80
 8003214:	08003351 	.word	0x08003351

08003218 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xTimerGenericCommand+0x30>
        __asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	623b      	str	r3, [r7, #32]
    }
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <xTimerGenericCommand+0x98>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02a      	beq.n	80032a6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b05      	cmp	r3, #5
 8003260:	dc18      	bgt.n	8003294 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003262:	f7ff fea5 	bl	8002fb0 <xTaskGetSchedulerState>
 8003266:	4603      	mov	r3, r0
 8003268:	2b02      	cmp	r3, #2
 800326a:	d109      	bne.n	8003280 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800326c:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <xTimerGenericCommand+0x98>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	f107 0114 	add.w	r1, r7, #20
 8003274:	2300      	movs	r3, #0
 8003276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003278:	f7fe fda6 	bl	8001dc8 <xQueueGenericSend>
 800327c:	6278      	str	r0, [r7, #36]	@ 0x24
 800327e:	e012      	b.n	80032a6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <xTimerGenericCommand+0x98>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f107 0114 	add.w	r1, r7, #20
 8003288:	2300      	movs	r3, #0
 800328a:	2200      	movs	r2, #0
 800328c:	f7fe fd9c 	bl	8001dc8 <xQueueGenericSend>
 8003290:	6278      	str	r0, [r7, #36]	@ 0x24
 8003292:	e008      	b.n	80032a6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <xTimerGenericCommand+0x98>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f107 0114 	add.w	r1, r7, #20
 800329c:	2300      	movs	r3, #0
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	f7fe fe7c 	bl	8001f9c <xQueueGenericSendFromISR>
 80032a4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	@ 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000024c 	.word	0x2000024c

080032b4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032be:	4b23      	ldr	r3, [pc, #140]	@ (800334c <prvProcessExpiredTimer+0x98>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fc6f 	bl	8001bb0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	18d1      	adds	r1, r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	6978      	ldr	r0, [r7, #20]
 80032ee:	f000 f8d5 	bl	800349c <prvInsertTimerInActiveList>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032f8:	2300      	movs	r3, #0
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	2100      	movs	r1, #0
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff88 	bl	8003218 <xTimerGenericCommand>
 8003308:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d114      	bne.n	800333a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
    }
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	b2da      	uxtb	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	4798      	blx	r3
    }
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000244 	.word	0x20000244

08003350 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f859 	bl	8003414 <prvGetNextExpireTime>
 8003362:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4619      	mov	r1, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f805 	bl	8003378 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800336e:	f000 f8d7 	bl	8003520 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003372:	bf00      	nop
 8003374:	e7f0      	b.n	8003358 <prvTimerTask+0x8>
	...

08003378 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003382:	f7ff fa89 	bl	8002898 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f866 	bl	800345c <prvSampleTimeNow>
 8003390:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d130      	bne.n	80033fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <prvProcessTimerOrBlockTask+0x3c>
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d806      	bhi.n	80033b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80033a6:	f7ff fa85 	bl	80028b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff81 	bl	80032b4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80033b2:	e024      	b.n	80033fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <prvProcessTimerOrBlockTask+0x90>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <prvProcessTimerOrBlockTask+0x50>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <prvProcessTimerOrBlockTask+0x52>
 80033c8:	2300      	movs	r3, #0
 80033ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <prvProcessTimerOrBlockTask+0x94>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4619      	mov	r1, r3
 80033da:	f7ff f89f 	bl	800251c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80033de:	f7ff fa69 	bl	80028b4 <xTaskResumeAll>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <prvProcessTimerOrBlockTask+0x98>)
 80033ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	f3bf 8f6f 	isb	sy
    }
 80033f8:	e001      	b.n	80033fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80033fa:	f7ff fa5b 	bl	80028b4 <xTaskResumeAll>
    }
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000248 	.word	0x20000248
 800340c:	2000024c 	.word	0x2000024c
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800341c:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <prvGetNextExpireTime+0x44>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <prvGetNextExpireTime+0x16>
 8003426:	2201      	movs	r2, #1
 8003428:	e000      	b.n	800342c <prvGetNextExpireTime+0x18>
 800342a:	2200      	movs	r2, #0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <prvGetNextExpireTime+0x44>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e001      	b.n	8003448 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003448:	68fb      	ldr	r3, [r7, #12]
    }
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000244 	.word	0x20000244

0800345c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003464:	f7ff fab6 	bl	80029d4 <xTaskGetTickCount>
 8003468:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <prvSampleTimeNow+0x3c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d205      	bcs.n	8003480 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003474:	f000 f91e 	bl	80036b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e002      	b.n	8003486 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <prvSampleTimeNow+0x3c>)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800348c:	68fb      	ldr	r3, [r7, #12]
    }
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000254 	.word	0x20000254

0800349c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d812      	bhi.n	80034e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad2      	subs	r2, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d302      	bcc.n	80034d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e01b      	b.n	800350e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80034d6:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <prvInsertTimerInActiveList+0x7c>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f7fe fb2c 	bl	8001b3e <vListInsert>
 80034e6:	e012      	b.n	800350e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d206      	bcs.n	80034fe <prvInsertTimerInActiveList+0x62>
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e007      	b.n	800350e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <prvInsertTimerInActiveList+0x80>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe fb18 	bl	8001b3e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800350e:	697b      	ldr	r3, [r7, #20]
    }
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000248 	.word	0x20000248
 800351c:	20000244 	.word	0x20000244

08003520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003526:	e0b2      	b.n	800368e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f2c0 80af 	blt.w	800368e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fb35 	bl	8001bb0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff87 	bl	800345c <prvSampleTimeNow>
 800354e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b09      	cmp	r3, #9
 8003554:	f200 8098 	bhi.w	8003688 <prvProcessReceivedCommands+0x168>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <prvProcessReceivedCommands+0x40>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003589 	.word	0x08003589
 8003564:	08003589 	.word	0x08003589
 8003568:	08003589 	.word	0x08003589
 800356c:	080035ff 	.word	0x080035ff
 8003570:	08003613 	.word	0x08003613
 8003574:	0800365f 	.word	0x0800365f
 8003578:	08003589 	.word	0x08003589
 800357c:	08003589 	.word	0x08003589
 8003580:	080035ff 	.word	0x080035ff
 8003584:	08003613 	.word	0x08003613
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	18d1      	adds	r1, r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a3a      	ldr	r2, [r7, #32]
 80035a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035a8:	f7ff ff78 	bl	800349c <prvInsertTimerInActiveList>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035b8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d061      	beq.n	800368c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	441a      	add	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	2100      	movs	r1, #0
 80035d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035da:	f7ff fe1d 	bl	8003218 <xTimerGenericCommand>
 80035de:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d152      	bne.n	800368c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	61bb      	str	r3, [r7, #24]
    }
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003610:	e03d      	b.n	800368e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	617b      	str	r3, [r7, #20]
    }
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	18d1      	adds	r1, r2, r3
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003658:	f7ff ff20 	bl	800349c <prvInsertTimerInActiveList>
                        break;
 800365c:	e017      	b.n	800368e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d103      	bne.n	8003674 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800366c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800366e:	f000 fbf9 	bl	8003e64 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003672:	e00c      	b.n	800368e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003686:	e002      	b.n	800368e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <prvProcessReceivedCommands+0x16e>
                        break;
 800368c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800368e:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <prvProcessReceivedCommands+0x190>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f107 0108 	add.w	r1, r7, #8
 8003696:	2200      	movs	r2, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe fd2d 	bl	80020f8 <xQueueReceive>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af41 	bne.w	8003528 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	3728      	adds	r7, #40	@ 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000024c 	.word	0x2000024c

080036b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036ba:	e049      	b.n	8003750 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fa6b 	bl	8001bb0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02f      	beq.n	8003750 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d90e      	bls.n	8003720 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800370e:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f7fe fa10 	bl	8001b3e <vListInsert>
 800371e:	e017      	b.n	8003750 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003720:	2300      	movs	r3, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	2100      	movs	r1, #0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fd74 	bl	8003218 <xTimerGenericCommand>
 8003730:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	603b      	str	r3, [r7, #0]
    }
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1b0      	bne.n	80036bc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <prvSwitchTimerLists+0xc8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <prvSwitchTimerLists+0xc4>)
 8003766:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <prvSwitchTimerLists+0xc8>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	6013      	str	r3, [r2, #0]
    }
 800376e:	bf00      	nop
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000244 	.word	0x20000244
 800377c:	20000248 	.word	0x20000248

08003780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003784:	f000 f962 	bl	8003a4c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003788:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <prvCheckForValidListAndQueue+0x54>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003790:	4811      	ldr	r0, [pc, #68]	@ (80037d8 <prvCheckForValidListAndQueue+0x58>)
 8003792:	f7fe f983 	bl	8001a9c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <prvCheckForValidListAndQueue+0x5c>)
 8003798:	f7fe f980 	bl	8001a9c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <prvCheckForValidListAndQueue+0x60>)
 800379e:	4a0e      	ldr	r2, [pc, #56]	@ (80037d8 <prvCheckForValidListAndQueue+0x58>)
 80037a0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <prvCheckForValidListAndQueue+0x64>)
 80037a4:	4a0d      	ldr	r2, [pc, #52]	@ (80037dc <prvCheckForValidListAndQueue+0x5c>)
 80037a6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80037a8:	2200      	movs	r2, #0
 80037aa:	210c      	movs	r1, #12
 80037ac:	200a      	movs	r0, #10
 80037ae:	f7fe fa85 	bl	8001cbc <xQueueGenericCreate>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4a07      	ldr	r2, [pc, #28]	@ (80037d4 <prvCheckForValidListAndQueue+0x54>)
 80037b6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <prvCheckForValidListAndQueue+0x54>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80037c0:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <prvCheckForValidListAndQueue+0x54>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4908      	ldr	r1, [pc, #32]	@ (80037e8 <prvCheckForValidListAndQueue+0x68>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fe7e 	bl	80024c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037cc:	f000 f970 	bl	8003ab0 <vPortExitCritical>
    }
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	2000024c 	.word	0x2000024c
 80037d8:	2000021c 	.word	0x2000021c
 80037dc:	20000230 	.word	0x20000230
 80037e0:	20000244 	.word	0x20000244
 80037e4:	20000248 	.word	0x20000248
 80037e8:	08004a88 	.word	0x08004a88

080037ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3b04      	subs	r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003804:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b04      	subs	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0201 	bic.w	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3b04      	subs	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800381c:	4a0c      	ldr	r2, [pc, #48]	@ (8003850 <pxPortInitialiseStack+0x64>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b14      	subs	r3, #20
 8003826:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b04      	subs	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f06f 0202 	mvn.w	r2, #2
 800383a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3b20      	subs	r3, #32
 8003840:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	08003855 	.word	0x08003855

08003854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800385e:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <prvTaskExitError+0x58>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d00b      	beq.n	8003880 <prvTaskExitError+0x2c>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60fb      	str	r3, [r7, #12]
    }
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <prvTaskExitError+0x28>
        __asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60bb      	str	r3, [r7, #8]
    }
 8003892:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003894:	bf00      	nop
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0fc      	beq.n	8003896 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000010 	.word	0x20000010

080038b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80038b0:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <pxCurrentTCBConst2>)
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	6808      	ldr	r0, [r1, #0]
 80038b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ba:	f380 8809 	msr	PSP, r0
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f380 8811 	msr	BASEPRI, r0
 80038ca:	4770      	bx	lr
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst2>:
 80038d0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80038d8:	4808      	ldr	r0, [pc, #32]	@ (80038fc <prvPortStartFirstTask+0x24>)
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	6800      	ldr	r0, [r0, #0]
 80038de:	f380 8808 	msr	MSP, r0
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8814 	msr	CONTROL, r0
 80038ea:	b662      	cpsie	i
 80038ec:	b661      	cpsie	f
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	df00      	svc	0
 80038f8:	bf00      	nop
 80038fa:	0000      	.short	0x0000
 80038fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop

08003904 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800390a:	4b47      	ldr	r3, [pc, #284]	@ (8003a28 <xPortStartScheduler+0x124>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <xPortStartScheduler+0x128>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d10b      	bne.n	800392c <xPortStartScheduler+0x28>
        __asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
    }
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800392c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a28 <xPortStartScheduler+0x124>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3f      	ldr	r2, [pc, #252]	@ (8003a30 <xPortStartScheduler+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10b      	bne.n	800394e <xPortStartScheduler+0x4a>
        __asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
    }
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800394e:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <xPortStartScheduler+0x130>)
 8003950:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	22ff      	movs	r2, #255	@ 0xff
 800395e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <xPortStartScheduler+0x134>)
 8003974:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <xPortStartScheduler+0x138>)
 8003978:	2207      	movs	r2, #7
 800397a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800397c:	e009      	b.n	8003992 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800397e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a3c <xPortStartScheduler+0x138>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a2d      	ldr	r2, [pc, #180]	@ (8003a3c <xPortStartScheduler+0x138>)
 8003986:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d0ef      	beq.n	800397e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <xPortStartScheduler+0x138>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00b      	beq.n	80039c2 <xPortStartScheduler+0xbe>
        __asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60bb      	str	r3, [r7, #8]
    }
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <xPortStartScheduler+0x138>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a3c <xPortStartScheduler+0x138>)
 80039ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <xPortStartScheduler+0x138>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039d4:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <xPortStartScheduler+0x138>)
 80039d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80039e0:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <xPortStartScheduler+0x13c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <xPortStartScheduler+0x13c>)
 80039e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80039ec:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <xPortStartScheduler+0x13c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a13      	ldr	r2, [pc, #76]	@ (8003a40 <xPortStartScheduler+0x13c>)
 80039f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80039f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80039f8:	f000 f8e0 	bl	8003bbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <xPortStartScheduler+0x140>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003a02:	f000 f8ff 	bl	8003c04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <xPortStartScheduler+0x144>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a48 <xPortStartScheduler+0x144>)
 8003a0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003a10:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003a12:	f7ff ff61 	bl	80038d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003a16:	f7ff f883 	bl	8002b20 <vTaskSwitchContext>
    prvTaskExitError();
 8003a1a:	f7ff ff1b 	bl	8003854 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	410fc271 	.word	0x410fc271
 8003a30:	410fc270 	.word	0x410fc270
 8003a34:	e000e400 	.word	0xe000e400
 8003a38:	20000258 	.word	0x20000258
 8003a3c:	2000025c 	.word	0x2000025c
 8003a40:	e000ed20 	.word	0xe000ed20
 8003a44:	20000010 	.word	0x20000010
 8003a48:	e000ef34 	.word	0xe000ef34

08003a4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
        __asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	607b      	str	r3, [r7, #4]
    }
 8003a64:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <vPortEnterCritical+0x5c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa8 <vPortEnterCritical+0x5c>)
 8003a6e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003a70:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <vPortEnterCritical+0x5c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d110      	bne.n	8003a9a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <vPortEnterCritical+0x60>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <vPortEnterCritical+0x4e>
        __asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
    }
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <vPortEnterCritical+0x4a>
    }
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000010 	.word	0x20000010
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <vPortExitCritical+0x50>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <vPortExitCritical+0x26>
        __asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
    }
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <vPortExitCritical+0x50>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	4a08      	ldr	r2, [pc, #32]	@ (8003b00 <vPortExitCritical+0x50>)
 8003ade:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ae0:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <vPortExitCritical+0x50>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <vPortExitCritical+0x44>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f383 8811 	msr	BASEPRI, r3
    }
 8003af2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000010 	.word	0x20000010
	...

08003b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b10:	f3ef 8009 	mrs	r0, PSP
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <pxCurrentTCBConst>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f01e 0f10 	tst.w	lr, #16
 8003b20:	bf08      	it	eq
 8003b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2a:	6010      	str	r0, [r2, #0]
 8003b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b34:	f380 8811 	msr	BASEPRI, r0
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f7fe ffee 	bl	8002b20 <vTaskSwitchContext>
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f380 8811 	msr	BASEPRI, r0
 8003b4c:	bc09      	pop	{r0, r3}
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	6808      	ldr	r0, [r1, #0]
 8003b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b56:	f01e 0f10 	tst.w	lr, #16
 8003b5a:	bf08      	it	eq
 8003b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b60:	f380 8809 	msr	PSP, r0
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	f3af 8000 	nop.w

08003b70 <pxCurrentTCBConst>:
 8003b70:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop

08003b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	607b      	str	r3, [r7, #4]
    }
 8003b90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003b92:	f7fe ff2f 	bl	80029f4 <xTaskIncrementTick>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <SysTick_Handler+0x40>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f383 8811 	msr	BASEPRI, r3
    }
 8003bae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <vPortSetupTimerInterrupt+0x34>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <vPortSetupTimerInterrupt+0x38>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <vPortSetupTimerInterrupt+0x3c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <vPortSetupTimerInterrupt+0x40>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <vPortSetupTimerInterrupt+0x44>)
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bde:	4b04      	ldr	r3, [pc, #16]	@ (8003bf0 <vPortSetupTimerInterrupt+0x34>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010
 8003bf4:	e000e018 	.word	0xe000e018
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	10624dd3 	.word	0x10624dd3
 8003c00:	e000e014 	.word	0xe000e014

08003c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c14 <vPortEnableVFP+0x10>
 8003c08:	6801      	ldr	r1, [r0, #0]
 8003c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c0e:	6001      	str	r1, [r0, #0]
 8003c10:	4770      	bx	lr
 8003c12:	0000      	.short	0x0000
 8003c14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop

08003c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003c22:	f3ef 8305 	mrs	r3, IPSR
 8003c26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	d915      	bls.n	8003c5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <vPortValidateInterruptPriority+0x74>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c38:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <vPortValidateInterruptPriority+0x78>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	7afa      	ldrb	r2, [r7, #11]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20b      	bcs.n	8003c5a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	607b      	str	r3, [r7, #4]
    }
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <vPortValidateInterruptPriority+0x7c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <vPortValidateInterruptPriority+0x80>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d90b      	bls.n	8003c82 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	603b      	str	r3, [r7, #0]
    }
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <vPortValidateInterruptPriority+0x62>
    }
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000e3f0 	.word	0xe000e3f0
 8003c94:	20000258 	.word	0x20000258
 8003c98:	e000ed0c 	.word	0xe000ed0c
 8003c9c:	2000025c 	.word	0x2000025c

08003ca0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003cac:	f7fe fdf4 	bl	8002898 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <pvPortMalloc+0x1ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003cb8:	f000 f938 	bl	8003f2c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cbc:	4b64      	ldr	r3, [pc, #400]	@ (8003e50 <pvPortMalloc+0x1b0>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 80a9 	bne.w	8003e1c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02e      	beq.n	8003d2e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d228      	bcs.n	8003d2e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8003cdc:	2208      	movs	r2, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d022      	beq.n	8003d34 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f023 0307 	bic.w	r3, r3, #7
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d215      	bcs.n	8003d28 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	3308      	adds	r3, #8
 8003d04:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <pvPortMalloc+0x94>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	617b      	str	r3, [r7, #20]
    }
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d2c:	e002      	b.n	8003d34 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e000      	b.n	8003d36 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d34:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d06f      	beq.n	8003e1c <pvPortMalloc+0x17c>
 8003d3c:	4b45      	ldr	r3, [pc, #276]	@ (8003e54 <pvPortMalloc+0x1b4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d86a      	bhi.n	8003e1c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d46:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <pvPortMalloc+0x1b8>)
 8003d48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003d4a:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <pvPortMalloc+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d50:	e004      	b.n	8003d5c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d903      	bls.n	8003d6e <pvPortMalloc+0xce>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f1      	bne.n	8003d52 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d6e:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <pvPortMalloc+0x1ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d051      	beq.n	8003e1c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4413      	add	r3, r2
 8003d80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad2      	subs	r2, r2, r3
 8003d92:	2308      	movs	r3, #8
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d920      	bls.n	8003ddc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <pvPortMalloc+0x124>
        __asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	613b      	str	r3, [r7, #16]
    }
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dd6:	69b8      	ldr	r0, [r7, #24]
 8003dd8:	f000 f90a 	bl	8003ff0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <pvPortMalloc+0x1b4>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e54 <pvPortMalloc+0x1b4>)
 8003de8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dea:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <pvPortMalloc+0x1b4>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <pvPortMalloc+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d203      	bcs.n	8003dfe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003df6:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <pvPortMalloc+0x1b4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <pvPortMalloc+0x1bc>)
 8003dfc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4b13      	ldr	r3, [pc, #76]	@ (8003e50 <pvPortMalloc+0x1b0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e12:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <pvPortMalloc+0x1c0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a11      	ldr	r2, [pc, #68]	@ (8003e60 <pvPortMalloc+0x1c0>)
 8003e1a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e1c:	f7fe fd4a 	bl	80028b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <pvPortMalloc+0x1a2>
        __asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
    }
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <pvPortMalloc+0x19e>
    return pvReturn;
 8003e42:	69fb      	ldr	r3, [r7, #28]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	@ 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20012e68 	.word	0x20012e68
 8003e50:	20012e7c 	.word	0x20012e7c
 8003e54:	20012e6c 	.word	0x20012e6c
 8003e58:	20012e60 	.word	0x20012e60
 8003e5c:	20012e70 	.word	0x20012e70
 8003e60:	20012e74 	.word	0x20012e74

08003e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d04f      	beq.n	8003f16 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e76:	2308      	movs	r3, #8
 8003e78:	425b      	negs	r3, r3
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <vPortFree+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <vPortFree+0x46>
        __asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60fb      	str	r3, [r7, #12]
    }
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <vPortFree+0x66>
        __asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
    }
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <vPortFree+0xbc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01e      	beq.n	8003f16 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11a      	bne.n	8003f16 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <vPortFree+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ef0:	f7fe fcd2 	bl	8002898 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <vPortFree+0xc0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <vPortFree+0xc0>)
 8003f00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f02:	6938      	ldr	r0, [r7, #16]
 8003f04:	f000 f874 	bl	8003ff0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <vPortFree+0xc4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a06      	ldr	r2, [pc, #24]	@ (8003f28 <vPortFree+0xc4>)
 8003f10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003f12:	f7fe fccf 	bl	80028b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20012e7c 	.word	0x20012e7c
 8003f24:	20012e6c 	.word	0x20012e6c
 8003f28:	20012e78 	.word	0x20012e78

08003f2c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f32:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003f36:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003f38:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <prvHeapInit+0xac>)
 8003f3a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3307      	adds	r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0307 	bic.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <prvHeapInit+0xac>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f64:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <prvHeapInit+0xb0>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <prvHeapInit+0xb0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f78:	2208      	movs	r2, #8
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f8c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f8e:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <prvHeapInit+0xb4>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe4 <prvHeapInit+0xb8>)
 8003fba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <prvHeapInit+0xbc>)
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <prvHeapInit+0xc0>)
 8003fc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	20000260 	.word	0x20000260
 8003fdc:	20012e60 	.word	0x20012e60
 8003fe0:	20012e68 	.word	0x20012e68
 8003fe4:	20012e70 	.word	0x20012e70
 8003fe8:	20012e6c 	.word	0x20012e6c
 8003fec:	20012e7c 	.word	0x20012e7c

08003ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <prvInsertBlockIntoFreeList+0xac>)
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <prvInsertBlockIntoFreeList+0x14>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d8f7      	bhi.n	8003ffe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d108      	bne.n	8004032 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d118      	bne.n	8004078 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d00d      	beq.n	800406e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e008      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e003      	b.n	8004080 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d002      	beq.n	800408e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20012e60 	.word	0x20012e60
 80040a0:	20012e68 	.word	0x20012e68

080040a4 <std>:
 80040a4:	2300      	movs	r3, #0
 80040a6:	b510      	push	{r4, lr}
 80040a8:	4604      	mov	r4, r0
 80040aa:	e9c0 3300 	strd	r3, r3, [r0]
 80040ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040b2:	6083      	str	r3, [r0, #8]
 80040b4:	8181      	strh	r1, [r0, #12]
 80040b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80040b8:	81c2      	strh	r2, [r0, #14]
 80040ba:	6183      	str	r3, [r0, #24]
 80040bc:	4619      	mov	r1, r3
 80040be:	2208      	movs	r2, #8
 80040c0:	305c      	adds	r0, #92	@ 0x5c
 80040c2:	f000 f9e7 	bl	8004494 <memset>
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <std+0x58>)
 80040c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <std+0x5c>)
 80040cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <std+0x60>)
 80040d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <std+0x64>)
 80040d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <std+0x68>)
 80040d8:	6224      	str	r4, [r4, #32]
 80040da:	429c      	cmp	r4, r3
 80040dc:	d006      	beq.n	80040ec <std+0x48>
 80040de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040e2:	4294      	cmp	r4, r2
 80040e4:	d002      	beq.n	80040ec <std+0x48>
 80040e6:	33d0      	adds	r3, #208	@ 0xd0
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d105      	bne.n	80040f8 <std+0x54>
 80040ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f4:	f000 ba40 	b.w	8004578 <__retarget_lock_init_recursive>
 80040f8:	bd10      	pop	{r4, pc}
 80040fa:	bf00      	nop
 80040fc:	080042e5 	.word	0x080042e5
 8004100:	08004307 	.word	0x08004307
 8004104:	0800433f 	.word	0x0800433f
 8004108:	08004363 	.word	0x08004363
 800410c:	20012e80 	.word	0x20012e80

08004110 <stdio_exit_handler>:
 8004110:	4a02      	ldr	r2, [pc, #8]	@ (800411c <stdio_exit_handler+0xc>)
 8004112:	4903      	ldr	r1, [pc, #12]	@ (8004120 <stdio_exit_handler+0x10>)
 8004114:	4803      	ldr	r0, [pc, #12]	@ (8004124 <stdio_exit_handler+0x14>)
 8004116:	f000 b869 	b.w	80041ec <_fwalk_sglue>
 800411a:	bf00      	nop
 800411c:	20000014 	.word	0x20000014
 8004120:	08004895 	.word	0x08004895
 8004124:	20000024 	.word	0x20000024

08004128 <cleanup_stdio>:
 8004128:	6841      	ldr	r1, [r0, #4]
 800412a:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <cleanup_stdio+0x34>)
 800412c:	4299      	cmp	r1, r3
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	d001      	beq.n	8004138 <cleanup_stdio+0x10>
 8004134:	f000 fbae 	bl	8004894 <_fflush_r>
 8004138:	68a1      	ldr	r1, [r4, #8]
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <cleanup_stdio+0x38>)
 800413c:	4299      	cmp	r1, r3
 800413e:	d002      	beq.n	8004146 <cleanup_stdio+0x1e>
 8004140:	4620      	mov	r0, r4
 8004142:	f000 fba7 	bl	8004894 <_fflush_r>
 8004146:	68e1      	ldr	r1, [r4, #12]
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <cleanup_stdio+0x3c>)
 800414a:	4299      	cmp	r1, r3
 800414c:	d004      	beq.n	8004158 <cleanup_stdio+0x30>
 800414e:	4620      	mov	r0, r4
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	f000 bb9e 	b.w	8004894 <_fflush_r>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	bf00      	nop
 800415c:	20012e80 	.word	0x20012e80
 8004160:	20012ee8 	.word	0x20012ee8
 8004164:	20012f50 	.word	0x20012f50

08004168 <global_stdio_init.part.0>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <global_stdio_init.part.0+0x30>)
 800416c:	4c0b      	ldr	r4, [pc, #44]	@ (800419c <global_stdio_init.part.0+0x34>)
 800416e:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <global_stdio_init.part.0+0x38>)
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4620      	mov	r0, r4
 8004174:	2200      	movs	r2, #0
 8004176:	2104      	movs	r1, #4
 8004178:	f7ff ff94 	bl	80040a4 <std>
 800417c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004180:	2201      	movs	r2, #1
 8004182:	2109      	movs	r1, #9
 8004184:	f7ff ff8e 	bl	80040a4 <std>
 8004188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800418c:	2202      	movs	r2, #2
 800418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004192:	2112      	movs	r1, #18
 8004194:	f7ff bf86 	b.w	80040a4 <std>
 8004198:	20012fb8 	.word	0x20012fb8
 800419c:	20012e80 	.word	0x20012e80
 80041a0:	08004111 	.word	0x08004111

080041a4 <__sfp_lock_acquire>:
 80041a4:	4801      	ldr	r0, [pc, #4]	@ (80041ac <__sfp_lock_acquire+0x8>)
 80041a6:	f000 b9e8 	b.w	800457a <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	20012fc1 	.word	0x20012fc1

080041b0 <__sfp_lock_release>:
 80041b0:	4801      	ldr	r0, [pc, #4]	@ (80041b8 <__sfp_lock_release+0x8>)
 80041b2:	f000 b9e3 	b.w	800457c <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	20012fc1 	.word	0x20012fc1

080041bc <__sinit>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4604      	mov	r4, r0
 80041c0:	f7ff fff0 	bl	80041a4 <__sfp_lock_acquire>
 80041c4:	6a23      	ldr	r3, [r4, #32]
 80041c6:	b11b      	cbz	r3, 80041d0 <__sinit+0x14>
 80041c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041cc:	f7ff bff0 	b.w	80041b0 <__sfp_lock_release>
 80041d0:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <__sinit+0x28>)
 80041d2:	6223      	str	r3, [r4, #32]
 80041d4:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <__sinit+0x2c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f5      	bne.n	80041c8 <__sinit+0xc>
 80041dc:	f7ff ffc4 	bl	8004168 <global_stdio_init.part.0>
 80041e0:	e7f2      	b.n	80041c8 <__sinit+0xc>
 80041e2:	bf00      	nop
 80041e4:	08004129 	.word	0x08004129
 80041e8:	20012fb8 	.word	0x20012fb8

080041ec <_fwalk_sglue>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	4607      	mov	r7, r0
 80041f2:	4688      	mov	r8, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	2600      	movs	r6, #0
 80041f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004200:	d505      	bpl.n	800420e <_fwalk_sglue+0x22>
 8004202:	6824      	ldr	r4, [r4, #0]
 8004204:	2c00      	cmp	r4, #0
 8004206:	d1f7      	bne.n	80041f8 <_fwalk_sglue+0xc>
 8004208:	4630      	mov	r0, r6
 800420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d907      	bls.n	8004224 <_fwalk_sglue+0x38>
 8004214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004218:	3301      	adds	r3, #1
 800421a:	d003      	beq.n	8004224 <_fwalk_sglue+0x38>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	4306      	orrs	r6, r0
 8004224:	3568      	adds	r5, #104	@ 0x68
 8004226:	e7e9      	b.n	80041fc <_fwalk_sglue+0x10>

08004228 <_puts_r>:
 8004228:	6a03      	ldr	r3, [r0, #32]
 800422a:	b570      	push	{r4, r5, r6, lr}
 800422c:	6884      	ldr	r4, [r0, #8]
 800422e:	4605      	mov	r5, r0
 8004230:	460e      	mov	r6, r1
 8004232:	b90b      	cbnz	r3, 8004238 <_puts_r+0x10>
 8004234:	f7ff ffc2 	bl	80041bc <__sinit>
 8004238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800423a:	07db      	lsls	r3, r3, #31
 800423c:	d405      	bmi.n	800424a <_puts_r+0x22>
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	0598      	lsls	r0, r3, #22
 8004242:	d402      	bmi.n	800424a <_puts_r+0x22>
 8004244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004246:	f000 f998 	bl	800457a <__retarget_lock_acquire_recursive>
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	0719      	lsls	r1, r3, #28
 800424e:	d502      	bpl.n	8004256 <_puts_r+0x2e>
 8004250:	6923      	ldr	r3, [r4, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d135      	bne.n	80042c2 <_puts_r+0x9a>
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f000 f8c5 	bl	80043e8 <__swsetup_r>
 800425e:	b380      	cbz	r0, 80042c2 <_puts_r+0x9a>
 8004260:	f04f 35ff 	mov.w	r5, #4294967295
 8004264:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d405      	bmi.n	8004276 <_puts_r+0x4e>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d402      	bmi.n	8004276 <_puts_r+0x4e>
 8004270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004272:	f000 f983 	bl	800457c <__retarget_lock_release_recursive>
 8004276:	4628      	mov	r0, r5
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	2b00      	cmp	r3, #0
 800427c:	da04      	bge.n	8004288 <_puts_r+0x60>
 800427e:	69a2      	ldr	r2, [r4, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	dc17      	bgt.n	80042b4 <_puts_r+0x8c>
 8004284:	290a      	cmp	r1, #10
 8004286:	d015      	beq.n	80042b4 <_puts_r+0x8c>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004296:	3b01      	subs	r3, #1
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	2900      	cmp	r1, #0
 800429c:	d1ed      	bne.n	800427a <_puts_r+0x52>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da11      	bge.n	80042c6 <_puts_r+0x9e>
 80042a2:	4622      	mov	r2, r4
 80042a4:	210a      	movs	r1, #10
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f85f 	bl	800436a <__swbuf_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d0d7      	beq.n	8004260 <_puts_r+0x38>
 80042b0:	250a      	movs	r5, #10
 80042b2:	e7d7      	b.n	8004264 <_puts_r+0x3c>
 80042b4:	4622      	mov	r2, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f857 	bl	800436a <__swbuf_r>
 80042bc:	3001      	adds	r0, #1
 80042be:	d1e7      	bne.n	8004290 <_puts_r+0x68>
 80042c0:	e7ce      	b.n	8004260 <_puts_r+0x38>
 80042c2:	3e01      	subs	r6, #1
 80042c4:	e7e4      	b.n	8004290 <_puts_r+0x68>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	6022      	str	r2, [r4, #0]
 80042cc:	220a      	movs	r2, #10
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e7ee      	b.n	80042b0 <_puts_r+0x88>
	...

080042d4 <puts>:
 80042d4:	4b02      	ldr	r3, [pc, #8]	@ (80042e0 <puts+0xc>)
 80042d6:	4601      	mov	r1, r0
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f7ff bfa5 	b.w	8004228 <_puts_r>
 80042de:	bf00      	nop
 80042e0:	20000020 	.word	0x20000020

080042e4 <__sread>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	460c      	mov	r4, r1
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	f000 f8fc 	bl	80044e8 <_read_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	bfab      	itete	ge
 80042f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042f6:	89a3      	ldrhlt	r3, [r4, #12]
 80042f8:	181b      	addge	r3, r3, r0
 80042fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042fe:	bfac      	ite	ge
 8004300:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004302:	81a3      	strhlt	r3, [r4, #12]
 8004304:	bd10      	pop	{r4, pc}

08004306 <__swrite>:
 8004306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430a:	461f      	mov	r7, r3
 800430c:	898b      	ldrh	r3, [r1, #12]
 800430e:	05db      	lsls	r3, r3, #23
 8004310:	4605      	mov	r5, r0
 8004312:	460c      	mov	r4, r1
 8004314:	4616      	mov	r6, r2
 8004316:	d505      	bpl.n	8004324 <__swrite+0x1e>
 8004318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431c:	2302      	movs	r3, #2
 800431e:	2200      	movs	r2, #0
 8004320:	f000 f8d0 	bl	80044c4 <_lseek_r>
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800432a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800432e:	81a3      	strh	r3, [r4, #12]
 8004330:	4632      	mov	r2, r6
 8004332:	463b      	mov	r3, r7
 8004334:	4628      	mov	r0, r5
 8004336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433a:	f000 b8e7 	b.w	800450c <_write_r>

0800433e <__sseek>:
 800433e:	b510      	push	{r4, lr}
 8004340:	460c      	mov	r4, r1
 8004342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004346:	f000 f8bd 	bl	80044c4 <_lseek_r>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	bf15      	itete	ne
 8004350:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004352:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004356:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800435a:	81a3      	strheq	r3, [r4, #12]
 800435c:	bf18      	it	ne
 800435e:	81a3      	strhne	r3, [r4, #12]
 8004360:	bd10      	pop	{r4, pc}

08004362 <__sclose>:
 8004362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004366:	f000 b89d 	b.w	80044a4 <_close_r>

0800436a <__swbuf_r>:
 800436a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436c:	460e      	mov	r6, r1
 800436e:	4614      	mov	r4, r2
 8004370:	4605      	mov	r5, r0
 8004372:	b118      	cbz	r0, 800437c <__swbuf_r+0x12>
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b90b      	cbnz	r3, 800437c <__swbuf_r+0x12>
 8004378:	f7ff ff20 	bl	80041bc <__sinit>
 800437c:	69a3      	ldr	r3, [r4, #24]
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	071a      	lsls	r2, r3, #28
 8004384:	d501      	bpl.n	800438a <__swbuf_r+0x20>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	b943      	cbnz	r3, 800439c <__swbuf_r+0x32>
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 f82b 	bl	80043e8 <__swsetup_r>
 8004392:	b118      	cbz	r0, 800439c <__swbuf_r+0x32>
 8004394:	f04f 37ff 	mov.w	r7, #4294967295
 8004398:	4638      	mov	r0, r7
 800439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	6922      	ldr	r2, [r4, #16]
 80043a0:	1a98      	subs	r0, r3, r2
 80043a2:	6963      	ldr	r3, [r4, #20]
 80043a4:	b2f6      	uxtb	r6, r6
 80043a6:	4283      	cmp	r3, r0
 80043a8:	4637      	mov	r7, r6
 80043aa:	dc05      	bgt.n	80043b8 <__swbuf_r+0x4e>
 80043ac:	4621      	mov	r1, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fa70 	bl	8004894 <_fflush_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d1ed      	bne.n	8004394 <__swbuf_r+0x2a>
 80043b8:	68a3      	ldr	r3, [r4, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60a3      	str	r3, [r4, #8]
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	6022      	str	r2, [r4, #0]
 80043c4:	701e      	strb	r6, [r3, #0]
 80043c6:	6962      	ldr	r2, [r4, #20]
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d004      	beq.n	80043d8 <__swbuf_r+0x6e>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	07db      	lsls	r3, r3, #31
 80043d2:	d5e1      	bpl.n	8004398 <__swbuf_r+0x2e>
 80043d4:	2e0a      	cmp	r6, #10
 80043d6:	d1df      	bne.n	8004398 <__swbuf_r+0x2e>
 80043d8:	4621      	mov	r1, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 fa5a 	bl	8004894 <_fflush_r>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d0d9      	beq.n	8004398 <__swbuf_r+0x2e>
 80043e4:	e7d6      	b.n	8004394 <__swbuf_r+0x2a>
	...

080043e8 <__swsetup_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <__swsetup_r+0xa8>)
 80043ec:	4605      	mov	r5, r0
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	460c      	mov	r4, r1
 80043f2:	b118      	cbz	r0, 80043fc <__swsetup_r+0x14>
 80043f4:	6a03      	ldr	r3, [r0, #32]
 80043f6:	b90b      	cbnz	r3, 80043fc <__swsetup_r+0x14>
 80043f8:	f7ff fee0 	bl	80041bc <__sinit>
 80043fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004400:	0719      	lsls	r1, r3, #28
 8004402:	d422      	bmi.n	800444a <__swsetup_r+0x62>
 8004404:	06da      	lsls	r2, r3, #27
 8004406:	d407      	bmi.n	8004418 <__swsetup_r+0x30>
 8004408:	2209      	movs	r2, #9
 800440a:	602a      	str	r2, [r5, #0]
 800440c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	f04f 30ff 	mov.w	r0, #4294967295
 8004416:	e033      	b.n	8004480 <__swsetup_r+0x98>
 8004418:	0758      	lsls	r0, r3, #29
 800441a:	d512      	bpl.n	8004442 <__swsetup_r+0x5a>
 800441c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800441e:	b141      	cbz	r1, 8004432 <__swsetup_r+0x4a>
 8004420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004424:	4299      	cmp	r1, r3
 8004426:	d002      	beq.n	800442e <__swsetup_r+0x46>
 8004428:	4628      	mov	r0, r5
 800442a:	f000 f8b7 	bl	800459c <_free_r>
 800442e:	2300      	movs	r3, #0
 8004430:	6363      	str	r3, [r4, #52]	@ 0x34
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	2300      	movs	r3, #0
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	81a3      	strh	r3, [r4, #12]
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	b94b      	cbnz	r3, 8004462 <__swsetup_r+0x7a>
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004458:	d003      	beq.n	8004462 <__swsetup_r+0x7a>
 800445a:	4621      	mov	r1, r4
 800445c:	4628      	mov	r0, r5
 800445e:	f000 fa67 	bl	8004930 <__smakebuf_r>
 8004462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004466:	f013 0201 	ands.w	r2, r3, #1
 800446a:	d00a      	beq.n	8004482 <__swsetup_r+0x9a>
 800446c:	2200      	movs	r2, #0
 800446e:	60a2      	str	r2, [r4, #8]
 8004470:	6962      	ldr	r2, [r4, #20]
 8004472:	4252      	negs	r2, r2
 8004474:	61a2      	str	r2, [r4, #24]
 8004476:	6922      	ldr	r2, [r4, #16]
 8004478:	b942      	cbnz	r2, 800448c <__swsetup_r+0xa4>
 800447a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800447e:	d1c5      	bne.n	800440c <__swsetup_r+0x24>
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	0799      	lsls	r1, r3, #30
 8004484:	bf58      	it	pl
 8004486:	6962      	ldrpl	r2, [r4, #20]
 8004488:	60a2      	str	r2, [r4, #8]
 800448a:	e7f4      	b.n	8004476 <__swsetup_r+0x8e>
 800448c:	2000      	movs	r0, #0
 800448e:	e7f7      	b.n	8004480 <__swsetup_r+0x98>
 8004490:	20000020 	.word	0x20000020

08004494 <memset>:
 8004494:	4402      	add	r2, r0
 8004496:	4603      	mov	r3, r0
 8004498:	4293      	cmp	r3, r2
 800449a:	d100      	bne.n	800449e <memset+0xa>
 800449c:	4770      	bx	lr
 800449e:	f803 1b01 	strb.w	r1, [r3], #1
 80044a2:	e7f9      	b.n	8004498 <memset+0x4>

080044a4 <_close_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d06      	ldr	r5, [pc, #24]	@ (80044c0 <_close_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc fa47 	bl	8000942 <_close>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_close_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_close_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20012fbc 	.word	0x20012fbc

080044c4 <_lseek_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4d07      	ldr	r5, [pc, #28]	@ (80044e4 <_lseek_r+0x20>)
 80044c8:	4604      	mov	r4, r0
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	2200      	movs	r2, #0
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f7fc fa5c 	bl	8000990 <_lseek>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_lseek_r+0x1e>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_lseek_r+0x1e>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	20012fbc 	.word	0x20012fbc

080044e8 <_read_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4d07      	ldr	r5, [pc, #28]	@ (8004508 <_read_r+0x20>)
 80044ec:	4604      	mov	r4, r0
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	602a      	str	r2, [r5, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7fc f9ea 	bl	80008d0 <_read>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_read_r+0x1e>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_read_r+0x1e>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20012fbc 	.word	0x20012fbc

0800450c <_write_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d07      	ldr	r5, [pc, #28]	@ (800452c <_write_r+0x20>)
 8004510:	4604      	mov	r4, r0
 8004512:	4608      	mov	r0, r1
 8004514:	4611      	mov	r1, r2
 8004516:	2200      	movs	r2, #0
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	f7fc f9f5 	bl	800090a <_write>
 8004520:	1c43      	adds	r3, r0, #1
 8004522:	d102      	bne.n	800452a <_write_r+0x1e>
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	b103      	cbz	r3, 800452a <_write_r+0x1e>
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	bd38      	pop	{r3, r4, r5, pc}
 800452c:	20012fbc 	.word	0x20012fbc

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4d0d      	ldr	r5, [pc, #52]	@ (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	@ (800456c <__libc_init_array+0x3c>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2600      	movs	r6, #0
 800453c:	42a6      	cmp	r6, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4d0b      	ldr	r5, [pc, #44]	@ (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	@ (8004574 <__libc_init_array+0x44>)
 8004544:	f000 fa70 	bl	8004a28 <_init>
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2600      	movs	r6, #0
 800454e:	42a6      	cmp	r6, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f855 3b04 	ldr.w	r3, [r5], #4
 8004558:	4798      	blx	r3
 800455a:	3601      	adds	r6, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004562:	4798      	blx	r3
 8004564:	3601      	adds	r6, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	08004ab0 	.word	0x08004ab0
 800456c:	08004ab0 	.word	0x08004ab0
 8004570:	08004ab0 	.word	0x08004ab0
 8004574:	08004ab4 	.word	0x08004ab4

08004578 <__retarget_lock_init_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_acquire_recursive>:
 800457a:	4770      	bx	lr

0800457c <__retarget_lock_release_recursive>:
 800457c:	4770      	bx	lr

0800457e <memcpy>:
 800457e:	440a      	add	r2, r1
 8004580:	4291      	cmp	r1, r2
 8004582:	f100 33ff 	add.w	r3, r0, #4294967295
 8004586:	d100      	bne.n	800458a <memcpy+0xc>
 8004588:	4770      	bx	lr
 800458a:	b510      	push	{r4, lr}
 800458c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004594:	4291      	cmp	r1, r2
 8004596:	d1f9      	bne.n	800458c <memcpy+0xe>
 8004598:	bd10      	pop	{r4, pc}
	...

0800459c <_free_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4605      	mov	r5, r0
 80045a0:	2900      	cmp	r1, #0
 80045a2:	d041      	beq.n	8004628 <_free_r+0x8c>
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f0c      	subs	r4, r1, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfb8      	it	lt
 80045ae:	18e4      	addlt	r4, r4, r3
 80045b0:	f000 f8e0 	bl	8004774 <__malloc_lock>
 80045b4:	4a1d      	ldr	r2, [pc, #116]	@ (800462c <_free_r+0x90>)
 80045b6:	6813      	ldr	r3, [r2, #0]
 80045b8:	b933      	cbnz	r3, 80045c8 <_free_r+0x2c>
 80045ba:	6063      	str	r3, [r4, #4]
 80045bc:	6014      	str	r4, [r2, #0]
 80045be:	4628      	mov	r0, r5
 80045c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045c4:	f000 b8dc 	b.w	8004780 <__malloc_unlock>
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	d908      	bls.n	80045de <_free_r+0x42>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	1821      	adds	r1, r4, r0
 80045d0:	428b      	cmp	r3, r1
 80045d2:	bf01      	itttt	eq
 80045d4:	6819      	ldreq	r1, [r3, #0]
 80045d6:	685b      	ldreq	r3, [r3, #4]
 80045d8:	1809      	addeq	r1, r1, r0
 80045da:	6021      	streq	r1, [r4, #0]
 80045dc:	e7ed      	b.n	80045ba <_free_r+0x1e>
 80045de:	461a      	mov	r2, r3
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	b10b      	cbz	r3, 80045e8 <_free_r+0x4c>
 80045e4:	42a3      	cmp	r3, r4
 80045e6:	d9fa      	bls.n	80045de <_free_r+0x42>
 80045e8:	6811      	ldr	r1, [r2, #0]
 80045ea:	1850      	adds	r0, r2, r1
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d10b      	bne.n	8004608 <_free_r+0x6c>
 80045f0:	6820      	ldr	r0, [r4, #0]
 80045f2:	4401      	add	r1, r0
 80045f4:	1850      	adds	r0, r2, r1
 80045f6:	4283      	cmp	r3, r0
 80045f8:	6011      	str	r1, [r2, #0]
 80045fa:	d1e0      	bne.n	80045be <_free_r+0x22>
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	6053      	str	r3, [r2, #4]
 8004602:	4408      	add	r0, r1
 8004604:	6010      	str	r0, [r2, #0]
 8004606:	e7da      	b.n	80045be <_free_r+0x22>
 8004608:	d902      	bls.n	8004610 <_free_r+0x74>
 800460a:	230c      	movs	r3, #12
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	e7d6      	b.n	80045be <_free_r+0x22>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	1821      	adds	r1, r4, r0
 8004614:	428b      	cmp	r3, r1
 8004616:	bf04      	itt	eq
 8004618:	6819      	ldreq	r1, [r3, #0]
 800461a:	685b      	ldreq	r3, [r3, #4]
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	bf04      	itt	eq
 8004620:	1809      	addeq	r1, r1, r0
 8004622:	6021      	streq	r1, [r4, #0]
 8004624:	6054      	str	r4, [r2, #4]
 8004626:	e7ca      	b.n	80045be <_free_r+0x22>
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	20012fc8 	.word	0x20012fc8

08004630 <sbrk_aligned>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4e0f      	ldr	r6, [pc, #60]	@ (8004670 <sbrk_aligned+0x40>)
 8004634:	460c      	mov	r4, r1
 8004636:	6831      	ldr	r1, [r6, #0]
 8004638:	4605      	mov	r5, r0
 800463a:	b911      	cbnz	r1, 8004642 <sbrk_aligned+0x12>
 800463c:	f000 f9d6 	bl	80049ec <_sbrk_r>
 8004640:	6030      	str	r0, [r6, #0]
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f9d1 	bl	80049ec <_sbrk_r>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	d103      	bne.n	8004656 <sbrk_aligned+0x26>
 800464e:	f04f 34ff 	mov.w	r4, #4294967295
 8004652:	4620      	mov	r0, r4
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	1cc4      	adds	r4, r0, #3
 8004658:	f024 0403 	bic.w	r4, r4, #3
 800465c:	42a0      	cmp	r0, r4
 800465e:	d0f8      	beq.n	8004652 <sbrk_aligned+0x22>
 8004660:	1a21      	subs	r1, r4, r0
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f9c2 	bl	80049ec <_sbrk_r>
 8004668:	3001      	adds	r0, #1
 800466a:	d1f2      	bne.n	8004652 <sbrk_aligned+0x22>
 800466c:	e7ef      	b.n	800464e <sbrk_aligned+0x1e>
 800466e:	bf00      	nop
 8004670:	20012fc4 	.word	0x20012fc4

08004674 <_malloc_r>:
 8004674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004678:	1ccd      	adds	r5, r1, #3
 800467a:	f025 0503 	bic.w	r5, r5, #3
 800467e:	3508      	adds	r5, #8
 8004680:	2d0c      	cmp	r5, #12
 8004682:	bf38      	it	cc
 8004684:	250c      	movcc	r5, #12
 8004686:	2d00      	cmp	r5, #0
 8004688:	4606      	mov	r6, r0
 800468a:	db01      	blt.n	8004690 <_malloc_r+0x1c>
 800468c:	42a9      	cmp	r1, r5
 800468e:	d904      	bls.n	800469a <_malloc_r+0x26>
 8004690:	230c      	movs	r3, #12
 8004692:	6033      	str	r3, [r6, #0]
 8004694:	2000      	movs	r0, #0
 8004696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004770 <_malloc_r+0xfc>
 800469e:	f000 f869 	bl	8004774 <__malloc_lock>
 80046a2:	f8d8 3000 	ldr.w	r3, [r8]
 80046a6:	461c      	mov	r4, r3
 80046a8:	bb44      	cbnz	r4, 80046fc <_malloc_r+0x88>
 80046aa:	4629      	mov	r1, r5
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff ffbf 	bl	8004630 <sbrk_aligned>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	4604      	mov	r4, r0
 80046b6:	d158      	bne.n	800476a <_malloc_r+0xf6>
 80046b8:	f8d8 4000 	ldr.w	r4, [r8]
 80046bc:	4627      	mov	r7, r4
 80046be:	2f00      	cmp	r7, #0
 80046c0:	d143      	bne.n	800474a <_malloc_r+0xd6>
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	d04b      	beq.n	800475e <_malloc_r+0xea>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	4639      	mov	r1, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	eb04 0903 	add.w	r9, r4, r3
 80046d0:	f000 f98c 	bl	80049ec <_sbrk_r>
 80046d4:	4581      	cmp	r9, r0
 80046d6:	d142      	bne.n	800475e <_malloc_r+0xea>
 80046d8:	6821      	ldr	r1, [r4, #0]
 80046da:	1a6d      	subs	r5, r5, r1
 80046dc:	4629      	mov	r1, r5
 80046de:	4630      	mov	r0, r6
 80046e0:	f7ff ffa6 	bl	8004630 <sbrk_aligned>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d03a      	beq.n	800475e <_malloc_r+0xea>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	442b      	add	r3, r5
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	f8d8 3000 	ldr.w	r3, [r8]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	bb62      	cbnz	r2, 8004750 <_malloc_r+0xdc>
 80046f6:	f8c8 7000 	str.w	r7, [r8]
 80046fa:	e00f      	b.n	800471c <_malloc_r+0xa8>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	1b52      	subs	r2, r2, r5
 8004700:	d420      	bmi.n	8004744 <_malloc_r+0xd0>
 8004702:	2a0b      	cmp	r2, #11
 8004704:	d917      	bls.n	8004736 <_malloc_r+0xc2>
 8004706:	1961      	adds	r1, r4, r5
 8004708:	42a3      	cmp	r3, r4
 800470a:	6025      	str	r5, [r4, #0]
 800470c:	bf18      	it	ne
 800470e:	6059      	strne	r1, [r3, #4]
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	bf08      	it	eq
 8004714:	f8c8 1000 	streq.w	r1, [r8]
 8004718:	5162      	str	r2, [r4, r5]
 800471a:	604b      	str	r3, [r1, #4]
 800471c:	4630      	mov	r0, r6
 800471e:	f000 f82f 	bl	8004780 <__malloc_unlock>
 8004722:	f104 000b 	add.w	r0, r4, #11
 8004726:	1d23      	adds	r3, r4, #4
 8004728:	f020 0007 	bic.w	r0, r0, #7
 800472c:	1ac2      	subs	r2, r0, r3
 800472e:	bf1c      	itt	ne
 8004730:	1a1b      	subne	r3, r3, r0
 8004732:	50a3      	strne	r3, [r4, r2]
 8004734:	e7af      	b.n	8004696 <_malloc_r+0x22>
 8004736:	6862      	ldr	r2, [r4, #4]
 8004738:	42a3      	cmp	r3, r4
 800473a:	bf0c      	ite	eq
 800473c:	f8c8 2000 	streq.w	r2, [r8]
 8004740:	605a      	strne	r2, [r3, #4]
 8004742:	e7eb      	b.n	800471c <_malloc_r+0xa8>
 8004744:	4623      	mov	r3, r4
 8004746:	6864      	ldr	r4, [r4, #4]
 8004748:	e7ae      	b.n	80046a8 <_malloc_r+0x34>
 800474a:	463c      	mov	r4, r7
 800474c:	687f      	ldr	r7, [r7, #4]
 800474e:	e7b6      	b.n	80046be <_malloc_r+0x4a>
 8004750:	461a      	mov	r2, r3
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	42a3      	cmp	r3, r4
 8004756:	d1fb      	bne.n	8004750 <_malloc_r+0xdc>
 8004758:	2300      	movs	r3, #0
 800475a:	6053      	str	r3, [r2, #4]
 800475c:	e7de      	b.n	800471c <_malloc_r+0xa8>
 800475e:	230c      	movs	r3, #12
 8004760:	6033      	str	r3, [r6, #0]
 8004762:	4630      	mov	r0, r6
 8004764:	f000 f80c 	bl	8004780 <__malloc_unlock>
 8004768:	e794      	b.n	8004694 <_malloc_r+0x20>
 800476a:	6005      	str	r5, [r0, #0]
 800476c:	e7d6      	b.n	800471c <_malloc_r+0xa8>
 800476e:	bf00      	nop
 8004770:	20012fc8 	.word	0x20012fc8

08004774 <__malloc_lock>:
 8004774:	4801      	ldr	r0, [pc, #4]	@ (800477c <__malloc_lock+0x8>)
 8004776:	f7ff bf00 	b.w	800457a <__retarget_lock_acquire_recursive>
 800477a:	bf00      	nop
 800477c:	20012fc0 	.word	0x20012fc0

08004780 <__malloc_unlock>:
 8004780:	4801      	ldr	r0, [pc, #4]	@ (8004788 <__malloc_unlock+0x8>)
 8004782:	f7ff befb 	b.w	800457c <__retarget_lock_release_recursive>
 8004786:	bf00      	nop
 8004788:	20012fc0 	.word	0x20012fc0

0800478c <__sflush_r>:
 800478c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	0716      	lsls	r6, r2, #28
 8004796:	4605      	mov	r5, r0
 8004798:	460c      	mov	r4, r1
 800479a:	d454      	bmi.n	8004846 <__sflush_r+0xba>
 800479c:	684b      	ldr	r3, [r1, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dc02      	bgt.n	80047a8 <__sflush_r+0x1c>
 80047a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dd48      	ble.n	800483a <__sflush_r+0xae>
 80047a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d045      	beq.n	800483a <__sflush_r+0xae>
 80047ae:	2300      	movs	r3, #0
 80047b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047b4:	682f      	ldr	r7, [r5, #0]
 80047b6:	6a21      	ldr	r1, [r4, #32]
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	d030      	beq.n	800481e <__sflush_r+0x92>
 80047bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	0759      	lsls	r1, r3, #29
 80047c2:	d505      	bpl.n	80047d0 <__sflush_r+0x44>
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047ca:	b10b      	cbz	r3, 80047d0 <__sflush_r+0x44>
 80047cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	2300      	movs	r3, #0
 80047d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047d4:	6a21      	ldr	r1, [r4, #32]
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b0      	blx	r6
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	d106      	bne.n	80047ee <__sflush_r+0x62>
 80047e0:	6829      	ldr	r1, [r5, #0]
 80047e2:	291d      	cmp	r1, #29
 80047e4:	d82b      	bhi.n	800483e <__sflush_r+0xb2>
 80047e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004890 <__sflush_r+0x104>)
 80047e8:	410a      	asrs	r2, r1
 80047ea:	07d6      	lsls	r6, r2, #31
 80047ec:	d427      	bmi.n	800483e <__sflush_r+0xb2>
 80047ee:	2200      	movs	r2, #0
 80047f0:	6062      	str	r2, [r4, #4]
 80047f2:	04d9      	lsls	r1, r3, #19
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	d504      	bpl.n	8004804 <__sflush_r+0x78>
 80047fa:	1c42      	adds	r2, r0, #1
 80047fc:	d101      	bne.n	8004802 <__sflush_r+0x76>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	b903      	cbnz	r3, 8004804 <__sflush_r+0x78>
 8004802:	6560      	str	r0, [r4, #84]	@ 0x54
 8004804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004806:	602f      	str	r7, [r5, #0]
 8004808:	b1b9      	cbz	r1, 800483a <__sflush_r+0xae>
 800480a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800480e:	4299      	cmp	r1, r3
 8004810:	d002      	beq.n	8004818 <__sflush_r+0x8c>
 8004812:	4628      	mov	r0, r5
 8004814:	f7ff fec2 	bl	800459c <_free_r>
 8004818:	2300      	movs	r3, #0
 800481a:	6363      	str	r3, [r4, #52]	@ 0x34
 800481c:	e00d      	b.n	800483a <__sflush_r+0xae>
 800481e:	2301      	movs	r3, #1
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	4602      	mov	r2, r0
 8004826:	1c50      	adds	r0, r2, #1
 8004828:	d1c9      	bne.n	80047be <__sflush_r+0x32>
 800482a:	682b      	ldr	r3, [r5, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0c6      	beq.n	80047be <__sflush_r+0x32>
 8004830:	2b1d      	cmp	r3, #29
 8004832:	d001      	beq.n	8004838 <__sflush_r+0xac>
 8004834:	2b16      	cmp	r3, #22
 8004836:	d11e      	bne.n	8004876 <__sflush_r+0xea>
 8004838:	602f      	str	r7, [r5, #0]
 800483a:	2000      	movs	r0, #0
 800483c:	e022      	b.n	8004884 <__sflush_r+0xf8>
 800483e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004842:	b21b      	sxth	r3, r3
 8004844:	e01b      	b.n	800487e <__sflush_r+0xf2>
 8004846:	690f      	ldr	r7, [r1, #16]
 8004848:	2f00      	cmp	r7, #0
 800484a:	d0f6      	beq.n	800483a <__sflush_r+0xae>
 800484c:	0793      	lsls	r3, r2, #30
 800484e:	680e      	ldr	r6, [r1, #0]
 8004850:	bf08      	it	eq
 8004852:	694b      	ldreq	r3, [r1, #20]
 8004854:	600f      	str	r7, [r1, #0]
 8004856:	bf18      	it	ne
 8004858:	2300      	movne	r3, #0
 800485a:	eba6 0807 	sub.w	r8, r6, r7
 800485e:	608b      	str	r3, [r1, #8]
 8004860:	f1b8 0f00 	cmp.w	r8, #0
 8004864:	dde9      	ble.n	800483a <__sflush_r+0xae>
 8004866:	6a21      	ldr	r1, [r4, #32]
 8004868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800486a:	4643      	mov	r3, r8
 800486c:	463a      	mov	r2, r7
 800486e:	4628      	mov	r0, r5
 8004870:	47b0      	blx	r6
 8004872:	2800      	cmp	r0, #0
 8004874:	dc08      	bgt.n	8004888 <__sflush_r+0xfc>
 8004876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004888:	4407      	add	r7, r0
 800488a:	eba8 0800 	sub.w	r8, r8, r0
 800488e:	e7e7      	b.n	8004860 <__sflush_r+0xd4>
 8004890:	dfbffffe 	.word	0xdfbffffe

08004894 <_fflush_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	4605      	mov	r5, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b913      	cbnz	r3, 80048a4 <_fflush_r+0x10>
 800489e:	2500      	movs	r5, #0
 80048a0:	4628      	mov	r0, r5
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	b118      	cbz	r0, 80048ae <_fflush_r+0x1a>
 80048a6:	6a03      	ldr	r3, [r0, #32]
 80048a8:	b90b      	cbnz	r3, 80048ae <_fflush_r+0x1a>
 80048aa:	f7ff fc87 	bl	80041bc <__sinit>
 80048ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f3      	beq.n	800489e <_fflush_r+0xa>
 80048b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048b8:	07d0      	lsls	r0, r2, #31
 80048ba:	d404      	bmi.n	80048c6 <_fflush_r+0x32>
 80048bc:	0599      	lsls	r1, r3, #22
 80048be:	d402      	bmi.n	80048c6 <_fflush_r+0x32>
 80048c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048c2:	f7ff fe5a 	bl	800457a <__retarget_lock_acquire_recursive>
 80048c6:	4628      	mov	r0, r5
 80048c8:	4621      	mov	r1, r4
 80048ca:	f7ff ff5f 	bl	800478c <__sflush_r>
 80048ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d0:	07da      	lsls	r2, r3, #31
 80048d2:	4605      	mov	r5, r0
 80048d4:	d4e4      	bmi.n	80048a0 <_fflush_r+0xc>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	059b      	lsls	r3, r3, #22
 80048da:	d4e1      	bmi.n	80048a0 <_fflush_r+0xc>
 80048dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048de:	f7ff fe4d 	bl	800457c <__retarget_lock_release_recursive>
 80048e2:	e7dd      	b.n	80048a0 <_fflush_r+0xc>

080048e4 <__swhatbuf_r>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	460c      	mov	r4, r1
 80048e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ec:	2900      	cmp	r1, #0
 80048ee:	b096      	sub	sp, #88	@ 0x58
 80048f0:	4615      	mov	r5, r2
 80048f2:	461e      	mov	r6, r3
 80048f4:	da0d      	bge.n	8004912 <__swhatbuf_r+0x2e>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	bf14      	ite	ne
 8004902:	2340      	movne	r3, #64	@ 0x40
 8004904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004908:	2000      	movs	r0, #0
 800490a:	6031      	str	r1, [r6, #0]
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	b016      	add	sp, #88	@ 0x58
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	466a      	mov	r2, sp
 8004914:	f000 f848 	bl	80049a8 <_fstat_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	dbec      	blt.n	80048f6 <__swhatbuf_r+0x12>
 800491c:	9901      	ldr	r1, [sp, #4]
 800491e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004926:	4259      	negs	r1, r3
 8004928:	4159      	adcs	r1, r3
 800492a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800492e:	e7eb      	b.n	8004908 <__swhatbuf_r+0x24>

08004930 <__smakebuf_r>:
 8004930:	898b      	ldrh	r3, [r1, #12]
 8004932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004934:	079d      	lsls	r5, r3, #30
 8004936:	4606      	mov	r6, r0
 8004938:	460c      	mov	r4, r1
 800493a:	d507      	bpl.n	800494c <__smakebuf_r+0x1c>
 800493c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	6123      	str	r3, [r4, #16]
 8004944:	2301      	movs	r3, #1
 8004946:	6163      	str	r3, [r4, #20]
 8004948:	b003      	add	sp, #12
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800494c:	ab01      	add	r3, sp, #4
 800494e:	466a      	mov	r2, sp
 8004950:	f7ff ffc8 	bl	80048e4 <__swhatbuf_r>
 8004954:	9f00      	ldr	r7, [sp, #0]
 8004956:	4605      	mov	r5, r0
 8004958:	4639      	mov	r1, r7
 800495a:	4630      	mov	r0, r6
 800495c:	f7ff fe8a 	bl	8004674 <_malloc_r>
 8004960:	b948      	cbnz	r0, 8004976 <__smakebuf_r+0x46>
 8004962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004966:	059a      	lsls	r2, r3, #22
 8004968:	d4ee      	bmi.n	8004948 <__smakebuf_r+0x18>
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	f043 0302 	orr.w	r3, r3, #2
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	e7e2      	b.n	800493c <__smakebuf_r+0xc>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	6020      	str	r0, [r4, #0]
 800497a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	9b01      	ldr	r3, [sp, #4]
 8004982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004986:	b15b      	cbz	r3, 80049a0 <__smakebuf_r+0x70>
 8004988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498c:	4630      	mov	r0, r6
 800498e:	f000 f81d 	bl	80049cc <_isatty_r>
 8004992:	b128      	cbz	r0, 80049a0 <__smakebuf_r+0x70>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	431d      	orrs	r5, r3
 80049a4:	81a5      	strh	r5, [r4, #12]
 80049a6:	e7cf      	b.n	8004948 <__smakebuf_r+0x18>

080049a8 <_fstat_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4d07      	ldr	r5, [pc, #28]	@ (80049c8 <_fstat_r+0x20>)
 80049ac:	2300      	movs	r3, #0
 80049ae:	4604      	mov	r4, r0
 80049b0:	4608      	mov	r0, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	602b      	str	r3, [r5, #0]
 80049b6:	f7fb ffd0 	bl	800095a <_fstat>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d102      	bne.n	80049c4 <_fstat_r+0x1c>
 80049be:	682b      	ldr	r3, [r5, #0]
 80049c0:	b103      	cbz	r3, 80049c4 <_fstat_r+0x1c>
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	bf00      	nop
 80049c8:	20012fbc 	.word	0x20012fbc

080049cc <_isatty_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4d06      	ldr	r5, [pc, #24]	@ (80049e8 <_isatty_r+0x1c>)
 80049d0:	2300      	movs	r3, #0
 80049d2:	4604      	mov	r4, r0
 80049d4:	4608      	mov	r0, r1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	f7fb ffcf 	bl	800097a <_isatty>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_isatty_r+0x1a>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_isatty_r+0x1a>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	20012fbc 	.word	0x20012fbc

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	@ (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f000 f808 	bl	8004a0c <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20012fbc 	.word	0x20012fbc

08004a0c <_sbrk>:
 8004a0c:	4a04      	ldr	r2, [pc, #16]	@ (8004a20 <_sbrk+0x14>)
 8004a0e:	6811      	ldr	r1, [r2, #0]
 8004a10:	4603      	mov	r3, r0
 8004a12:	b909      	cbnz	r1, 8004a18 <_sbrk+0xc>
 8004a14:	4903      	ldr	r1, [pc, #12]	@ (8004a24 <_sbrk+0x18>)
 8004a16:	6011      	str	r1, [r2, #0]
 8004a18:	6810      	ldr	r0, [r2, #0]
 8004a1a:	4403      	add	r3, r0
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4770      	bx	lr
 8004a20:	20012fcc 	.word	0x20012fcc
 8004a24:	20012fd0 	.word	0x20012fd0

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
