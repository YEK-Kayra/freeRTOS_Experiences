
001_freeRTOS_FirstSight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080027d0  080027d0  000037d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002820  08002820  00003820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002828  08002828  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800282c  0800282c  0000382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002830  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00012d84  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012d94  20012d94  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b186  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e06  00000000  00000000  0000f1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00010fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000967  00000000  00000000  00011c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d58  00000000  00000000  00012567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d94f  00000000  00000000  000332bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf321  00000000  00000000  00040c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ff2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003224  00000000  00000000  0010ff74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00113198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080027b8 	.word	0x080027b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080027b8 	.word	0x080027b8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af02      	add	r7, sp, #8


	/*! Used to pass a handle to the created task out of the xTaskCreate() function.
	 * pxCreatedTask is optional and can be set to NULL.
	 */
	TaskHandle_t task1_handle = NULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t task2_handle = NULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 f9fd 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f843 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f89f 	bl	8000618 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status_Task =  xTaskCreate(task1_handler, //pxTaskCode, Pointer to the task entry function (just the name of the function that implements the task)
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <main+0x88>)
 80004e6:	22c8      	movs	r2, #200	@ 0xc8
 80004e8:	4918      	ldr	r1, [pc, #96]	@ (800054c <main+0x8c>)
 80004ea:	4819      	ldr	r0, [pc, #100]	@ (8000550 <main+0x90>)
 80004ec:	f001 faa5 	bl	8001a3a <xTaskCreate>
 80004f0:	6178      	str	r0, [r7, #20]
				  200, 						 //usStackDepth	(200*word)
				  "Hello world form Task-1", //pvParameters(pointer to variable's parameter :)
				  2, 						 //uxPriority
				  &task1_handle); 			 //pxCreatedTask, Used to pass a handle to the created task out of the xTaskCreate() function, is optional and can be set to NULL.

  configASSERT(status_Task == pdPASS);		 //pdPASS is equal 1 as decimal
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d00b      	beq.n	8000510 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x4c>


  status_Task =  xTaskCreate(task2_handler,
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <main+0x94>)
 800051a:	22c8      	movs	r2, #200	@ 0xc8
 800051c:	490b      	ldr	r1, [pc, #44]	@ (800054c <main+0x8c>)
 800051e:	480e      	ldr	r0, [pc, #56]	@ (8000558 <main+0x98>)
 8000520:	f001 fa8b 	bl	8001a3a <xTaskCreate>
 8000524:	6178      	str	r0, [r7, #20]
				  200,
				  "Hello world form Task-2",
				  2,
				  &task2_handle);

  configASSERT(status_Task == pdPASS);
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d00b      	beq.n	8000544 <main+0x84>
        __asm volatile
 800052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000530:	f383 8811 	msr	BASEPRI, r3
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	f3bf 8f4f 	dsb	sy
 800053c:	60fb      	str	r3, [r7, #12]
    }
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <main+0x80>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x84>
 8000546:	bf00      	nop
 8000548:	080027d0 	.word	0x080027d0
 800054c:	080027e8 	.word	0x080027e8
 8000550:	08000669 	.word	0x08000669
 8000554:	080027f0 	.word	0x080027f0
 8000558:	0800067d 	.word	0x0800067d

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f8f8 	bl	8002760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xb4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xb4>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xb4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <SystemClock_Config+0xb8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000614 <SystemClock_Config+0xb8>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <SystemClock_Config+0xb8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 faa1 	bl	8000b14 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d8:	f000 f86c 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fd04 	bl	8001004 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000602:	f000 f857 	bl	80006b4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_GPIO_Init+0x4c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <MX_GPIO_Init+0x4c>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_GPIO_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_GPIO_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <MX_GPIO_Init+0x4c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *pvParam){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <task2_handler>:

static void task2_handler(void *pvParam){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a2:	f000 f935 	bl	8000910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40001000 	.word	0x40001000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	@ 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4b33      	ldr	r3, [pc, #204]	@ (80007f4 <HAL_InitTick+0xe4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a32      	ldr	r2, [pc, #200]	@ (80007f4 <HAL_InitTick+0xe4>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <HAL_InitTick+0xe4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fe28 	bl	800139c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000752:	2b00      	cmp	r3, #0
 8000754:	d103      	bne.n	800075e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000756:	f000 fe0d 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 800075a:	6378      	str	r0, [r7, #52]	@ 0x34
 800075c:	e004      	b.n	8000768 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800075e:	f000 fe09 	bl	8001374 <HAL_RCC_GetPCLK1Freq>
 8000762:	4603      	mov	r3, r0
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076a:	4a23      	ldr	r2, [pc, #140]	@ (80007f8 <HAL_InitTick+0xe8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	0c9b      	lsrs	r3, r3, #18
 8000772:	3b01      	subs	r3, #1
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <HAL_InitTick+0xec>)
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <HAL_InitTick+0xf0>)
 800077a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <HAL_InitTick+0xec>)
 800077e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000784:	4a1d      	ldr	r2, [pc, #116]	@ (80007fc <HAL_InitTick+0xec>)
 8000786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <HAL_InitTick+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <HAL_InitTick+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <HAL_InitTick+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800079c:	4817      	ldr	r0, [pc, #92]	@ (80007fc <HAL_InitTick+0xec>)
 800079e:	f000 fe2f 	bl	8001400 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80007a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d11b      	bne.n	80007e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007b0:	4812      	ldr	r0, [pc, #72]	@ (80007fc <HAL_InitTick+0xec>)
 80007b2:	f000 fe7f 	bl	80014b4 <HAL_TIM_Base_Start_IT>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80007bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d111      	bne.n	80007e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c4:	2036      	movs	r0, #54	@ 0x36
 80007c6:	f000 f997 	bl	8000af8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d808      	bhi.n	80007e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2036      	movs	r0, #54	@ 0x36
 80007d6:	f000 f973 	bl	8000ac0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_InitTick+0xf4>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e002      	b.n	80007e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3738      	adds	r7, #56	@ 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	431bde83 	.word	0x431bde83
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	40001000 	.word	0x40001000
 8000804:	20000004 	.word	0x20000004

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <TIM6_DAC_IRQHandler+0x10>)
 8000846:	f000 fea5 	bl	8001594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000002c 	.word	0x2000002c

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	@ (80008c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 ff63 	bl	8002770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff fe09 	bl	80004c0 <main>
  bx  lr    
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008bc:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 80008c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008c4:	20012d94 	.word	0x20012d94

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <HAL_Init+0x40>)
 80008d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <HAL_Init+0x40>)
 80008e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	@ (800090c <HAL_Init+0x40>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f8d8 	bl	8000aaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f7ff ff08 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fede 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023c00 	.word	0x40023c00

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000074 	.word	0x20000074

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000074 	.word	0x20000074

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4907      	ldr	r1, [pc, #28]	@ (80009ec <__NVIC_EnableIRQ+0x38>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff4c 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad2:	f7ff ff61 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000ad6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	6978      	ldr	r0, [r7, #20]
 8000ade:	f7ff ffb1 	bl	8000a44 <NVIC_EncodePriority>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff80 	bl	80009f0 <__NVIC_SetPriority>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff54 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e267      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d075      	beq.n	8000c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000b32:	4b88      	ldr	r3, [pc, #544]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d00c      	beq.n	8000b58 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3e:	4b85      	ldr	r3, [pc, #532]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d112      	bne.n	8000b70 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4a:	4b82      	ldr	r3, [pc, #520]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b56:	d10b      	bne.n	8000b70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b58:	4b7e      	ldr	r3, [pc, #504]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d05b      	beq.n	8000c1c <HAL_RCC_OscConfig+0x108>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d157      	bne.n	8000c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e242      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b78:	d106      	bne.n	8000b88 <HAL_RCC_OscConfig+0x74>
 8000b7a:	4b76      	ldr	r3, [pc, #472]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a75      	ldr	r2, [pc, #468]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e01d      	b.n	8000bc4 <HAL_RCC_OscConfig+0xb0>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b90:	d10c      	bne.n	8000bac <HAL_RCC_OscConfig+0x98>
 8000b92:	4b70      	ldr	r3, [pc, #448]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a6f      	ldr	r2, [pc, #444]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_RCC_OscConfig+0xb0>
 8000bac:	4b69      	ldr	r3, [pc, #420]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a68      	ldr	r2, [pc, #416]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b66      	ldr	r3, [pc, #408]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a65      	ldr	r2, [pc, #404]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d013      	beq.n	8000bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff feb4 	bl	8000938 <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff feb0 	bl	8000938 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	@ 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e207      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xc0>
 8000bf2:	e014      	b.n	8000c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fea0 	bl	8000938 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fe9c 	bl	8000938 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	@ 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e1f3      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	4b51      	ldr	r3, [pc, #324]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0xe8>
 8000c1a:	e000      	b.n	8000c1e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d063      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d11c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d116      	bne.n	8000c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <HAL_RCC_OscConfig+0x152>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d001      	beq.n	8000c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e1c7      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c66:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4937      	ldr	r1, [pc, #220]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7a:	e03a      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d020      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c84:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <HAL_RCC_OscConfig+0x244>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c8a:	f7ff fe55 	bl	8000938 <HAL_GetTick>
 8000c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c92:	f7ff fe51 	bl	8000938 <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e1a8      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f0      	beq.n	8000c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4925      	ldr	r1, [pc, #148]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e015      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <HAL_RCC_OscConfig+0x244>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fe34 	bl	8000938 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fe30 	bl	8000938 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e187      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d036      	beq.n	8000d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d016      	beq.n	8000d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_RCC_OscConfig+0x248>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fe14 	bl	8000938 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d14:	f7ff fe10 	bl	8000938 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e167      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_RCC_OscConfig+0x240>)
 8000d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x200>
 8000d32:	e01b      	b.n	8000d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_RCC_OscConfig+0x248>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fdfd 	bl	8000938 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	e00e      	b.n	8000d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d42:	f7ff fdf9 	bl	8000938 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d907      	bls.n	8000d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e150      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
 8000d54:	40023800 	.word	0x40023800
 8000d58:	42470000 	.word	0x42470000
 8000d5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d60:	4b88      	ldr	r3, [pc, #544]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1ea      	bne.n	8000d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 8097 	beq.w	8000ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7e:	4b81      	ldr	r3, [pc, #516]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a7c      	ldr	r2, [pc, #496]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b77      	ldr	r3, [pc, #476]	@ (8000f88 <HAL_RCC_OscConfig+0x474>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b74      	ldr	r3, [pc, #464]	@ (8000f88 <HAL_RCC_OscConfig+0x474>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a73      	ldr	r2, [pc, #460]	@ (8000f88 <HAL_RCC_OscConfig+0x474>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fdb9 	bl	8000938 <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fdb5 	bl	8000938 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e10c      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8000f88 <HAL_RCC_OscConfig+0x474>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x2ea>
 8000df0:	4b64      	ldr	r3, [pc, #400]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000df4:	4a63      	ldr	r2, [pc, #396]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8000dfc:	e01c      	b.n	8000e38 <HAL_RCC_OscConfig+0x324>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x30c>
 8000e06:	4b5f      	ldr	r3, [pc, #380]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e0a:	4a5e      	ldr	r2, [pc, #376]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e12:	4b5c      	ldr	r3, [pc, #368]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e16:	4a5b      	ldr	r2, [pc, #364]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0x324>
 8000e20:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e24:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e2c:	4b55      	ldr	r3, [pc, #340]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e30:	4a54      	ldr	r2, [pc, #336]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e32:	f023 0304 	bic.w	r3, r3, #4
 8000e36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d015      	beq.n	8000e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e40:	f7ff fd7a 	bl	8000938 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e46:	e00a      	b.n	8000e5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e48:	f7ff fd76 	bl	8000938 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e0cb      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0ee      	beq.n	8000e48 <HAL_RCC_OscConfig+0x334>
 8000e6a:	e014      	b.n	8000e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fd64 	bl	8000938 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e72:	e00a      	b.n	8000e8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e74:	f7ff fd60 	bl	8000938 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e0b5      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1ee      	bne.n	8000e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d105      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9c:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	4a38      	ldr	r2, [pc, #224]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a1 	beq.w	8000ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d05c      	beq.n	8000f78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d141      	bne.n	8000f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec6:	4b31      	ldr	r3, [pc, #196]	@ (8000f8c <HAL_RCC_OscConfig+0x478>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fd34 	bl	8000938 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff fd30 	bl	8000938 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e087      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee6:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	491b      	ldr	r1, [pc, #108]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <HAL_RCC_OscConfig+0x478>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fd09 	bl	8000938 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fd05 	bl	8000938 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e05c      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x416>
 8000f48:	e054      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_RCC_OscConfig+0x478>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fcf2 	bl	8000938 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff fcee 	bl	8000938 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e045      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_RCC_OscConfig+0x470>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x444>
 8000f76:	e03d      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d107      	bne.n	8000f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e038      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_RCC_OscConfig+0x4ec>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d028      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d121      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d11a      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d111      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	085b      	lsrs	r3, r3, #1
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d107      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0cc      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b68      	ldr	r3, [pc, #416]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d90c      	bls.n	8001040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b65      	ldr	r3, [pc, #404]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	4b63      	ldr	r3, [pc, #396]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0b8      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001058:	4b59      	ldr	r3, [pc, #356]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a58      	ldr	r2, [pc, #352]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a52      	ldr	r2, [pc, #328]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800107a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107c:	4b50      	ldr	r3, [pc, #320]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	494d      	ldr	r1, [pc, #308]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d044      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d119      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e07f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d003      	beq.n	80010c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e06f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e067      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b37      	ldr	r3, [pc, #220]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4934      	ldr	r1, [pc, #208]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fc20 	bl	8000938 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fc1c 	bl	8000938 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e04f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d20c      	bcs.n	800114c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e032      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4916      	ldr	r1, [pc, #88]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	4313      	orrs	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	490e      	ldr	r1, [pc, #56]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800118a:	f000 f821 	bl	80011d0 <HAL_RCC_GetSysClockFreq>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	490a      	ldr	r1, [pc, #40]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	5ccb      	ldrb	r3, [r1, r3]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fab0 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00
 80011c0:	40023800 	.word	0x40023800
 80011c4:	08002808 	.word	0x08002808
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011d4:	b090      	sub	sp, #64	@ 0x40
 80011d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e8:	4b59      	ldr	r3, [pc, #356]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d00d      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x40>
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	f200 80a1 	bhi.w	800133c <HAL_RCC_GetSysClockFreq+0x16c>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <HAL_RCC_GetSysClockFreq+0x34>
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d003      	beq.n	800120a <HAL_RCC_GetSysClockFreq+0x3a>
 8001202:	e09b      	b.n	800133c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b53      	ldr	r3, [pc, #332]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x184>)
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001208:	e09b      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800120a:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x188>)
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800120e:	e098      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001210:	4b4f      	ldr	r3, [pc, #316]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800121a:	4b4d      	ldr	r3, [pc, #308]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d028      	beq.n	8001278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001226:	4b4a      	ldr	r3, [pc, #296]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	099b      	lsrs	r3, r3, #6
 800122c:	2200      	movs	r2, #0
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	627a      	str	r2, [r7, #36]	@ 0x24
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001238:	2100      	movs	r1, #0
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x188>)
 800123c:	fb03 f201 	mul.w	r2, r3, r1
 8001240:	2300      	movs	r3, #0
 8001242:	fb00 f303 	mul.w	r3, r0, r3
 8001246:	4413      	add	r3, r2
 8001248:	4a43      	ldr	r2, [pc, #268]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x188>)
 800124a:	fba0 1202 	umull	r1, r2, r0, r2
 800124e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001250:	460a      	mov	r2, r1
 8001252:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001256:	4413      	add	r3, r2
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125c:	2200      	movs	r2, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	61fa      	str	r2, [r7, #28]
 8001262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800126a:	f7fe ffb1 	bl	80001d0 <__aeabi_uldivmod>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4613      	mov	r3, r2
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001276:	e053      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001278:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	099b      	lsrs	r3, r3, #6
 800127e:	2200      	movs	r2, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	617a      	str	r2, [r7, #20]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800128a:	f04f 0b00 	mov.w	fp, #0
 800128e:	4652      	mov	r2, sl
 8001290:	465b      	mov	r3, fp
 8001292:	f04f 0000 	mov.w	r0, #0
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	0159      	lsls	r1, r3, #5
 800129c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012a0:	0150      	lsls	r0, r2, #5
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	ebb2 080a 	subs.w	r8, r2, sl
 80012aa:	eb63 090b 	sbc.w	r9, r3, fp
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012c2:	ebb2 0408 	subs.w	r4, r2, r8
 80012c6:	eb63 0509 	sbc.w	r5, r3, r9
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	00eb      	lsls	r3, r5, #3
 80012d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012d8:	00e2      	lsls	r2, r4, #3
 80012da:	4614      	mov	r4, r2
 80012dc:	461d      	mov	r5, r3
 80012de:	eb14 030a 	adds.w	r3, r4, sl
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	eb45 030b 	adc.w	r3, r5, fp
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012f6:	4629      	mov	r1, r5
 80012f8:	028b      	lsls	r3, r1, #10
 80012fa:	4621      	mov	r1, r4
 80012fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001300:	4621      	mov	r1, r4
 8001302:	028a      	lsls	r2, r1, #10
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130a:	2200      	movs	r2, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	60fa      	str	r2, [r7, #12]
 8001310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001314:	f7fe ff5c 	bl	80001d0 <__aeabi_uldivmod>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4613      	mov	r3, r2
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x180>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	3301      	adds	r3, #1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001334:	fbb2 f3f3 	udiv	r3, r2, r3
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800133a:	e002      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x184>)
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001344:	4618      	mov	r0, r3
 8001346:	3740      	adds	r7, #64	@ 0x40
 8001348:	46bd      	mov	sp, r7
 800134a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	00f42400 	.word	0x00f42400
 8001358:	017d7840 	.word	0x017d7840

0800135c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_RCC_GetHCLKFreq+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000000 	.word	0x20000000

08001374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001378:	f7ff fff0 	bl	800135c <HAL_RCC_GetHCLKFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	0a9b      	lsrs	r3, r3, #10
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	4903      	ldr	r1, [pc, #12]	@ (8001398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	08002818 	.word	0x08002818

0800139c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	220f      	movs	r2, #15
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_RCC_GetClockConfig+0x60>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0207 	and.w	r2, r3, #7
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e041      	b.n	8001496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f839 	bl	800149e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3304      	adds	r3, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4610      	mov	r0, r2
 8001440:	f000 f9c0 	bl	80017c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d001      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e04e      	b.n	800156a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <HAL_TIM_Base_Start_IT+0xc4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d022      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f6:	d01d      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <HAL_TIM_Base_Start_IT+0xc8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d018      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_TIM_Base_Start_IT+0xcc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <HAL_TIM_Base_Start_IT+0xd0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00e      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <HAL_TIM_Base_Start_IT+0xd4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d009      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	@ (800158c <HAL_TIM_Base_Start_IT+0xd8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d004      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x80>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_TIM_Base_Start_IT+0xdc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d111      	bne.n	8001558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b06      	cmp	r3, #6
 8001544:	d010      	beq.n	8001568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001556:	e007      	b.n	8001568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40010000 	.word	0x40010000
 800157c:	40000400 	.word	0x40000400
 8001580:	40000800 	.word	0x40000800
 8001584:	40000c00 	.word	0x40000c00
 8001588:	40010400 	.word	0x40010400
 800158c:	40014000 	.word	0x40014000
 8001590:	40001800 	.word	0x40001800

08001594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d020      	beq.n	80015f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01b      	beq.n	80015f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0202 	mvn.w	r2, #2
 80015c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f8d2 	bl	8001788 <HAL_TIM_IC_CaptureCallback>
 80015e4:	e005      	b.n	80015f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8c4 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f8d5 	bl	800179c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d020      	beq.n	8001644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01b      	beq.n	8001644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0204 	mvn.w	r2, #4
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f8ac 	bl	8001788 <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f89e 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f8af 	bl	800179c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d020      	beq.n	8001690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01b      	beq.n	8001690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f06f 0208 	mvn.w	r2, #8
 8001660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2204      	movs	r2, #4
 8001666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f886 	bl	8001788 <HAL_TIM_IC_CaptureCallback>
 800167c:	e005      	b.n	800168a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f878 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f889 	bl	800179c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d020      	beq.n	80016dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01b      	beq.n	80016dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0210 	mvn.w	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f860 	bl	8001788 <HAL_TIM_IC_CaptureCallback>
 80016c8:	e005      	b.n	80016d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f852 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f863 	bl	800179c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0201 	mvn.w	r2, #1
 80016f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7fe ffc8 	bl	8000690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f906 	bl	8001930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f834 	bl	80017b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0220 	mvn.w	r2, #32
 8001764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8d8 	bl	800191c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a46      	ldr	r2, [pc, #280]	@ (80018f0 <TIM_Base_SetConfig+0x12c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d013      	beq.n	8001804 <TIM_Base_SetConfig+0x40>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e2:	d00f      	beq.n	8001804 <TIM_Base_SetConfig+0x40>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a43      	ldr	r2, [pc, #268]	@ (80018f4 <TIM_Base_SetConfig+0x130>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00b      	beq.n	8001804 <TIM_Base_SetConfig+0x40>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a42      	ldr	r2, [pc, #264]	@ (80018f8 <TIM_Base_SetConfig+0x134>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <TIM_Base_SetConfig+0x40>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a41      	ldr	r2, [pc, #260]	@ (80018fc <TIM_Base_SetConfig+0x138>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d003      	beq.n	8001804 <TIM_Base_SetConfig+0x40>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	@ (8001900 <TIM_Base_SetConfig+0x13c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d108      	bne.n	8001816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800180a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a35      	ldr	r2, [pc, #212]	@ (80018f0 <TIM_Base_SetConfig+0x12c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02b      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001824:	d027      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a32      	ldr	r2, [pc, #200]	@ (80018f4 <TIM_Base_SetConfig+0x130>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d023      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a31      	ldr	r2, [pc, #196]	@ (80018f8 <TIM_Base_SetConfig+0x134>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <TIM_Base_SetConfig+0x138>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01b      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <TIM_Base_SetConfig+0x13c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d017      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a2e      	ldr	r2, [pc, #184]	@ (8001904 <TIM_Base_SetConfig+0x140>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <TIM_Base_SetConfig+0x144>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00f      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a2c      	ldr	r2, [pc, #176]	@ (800190c <TIM_Base_SetConfig+0x148>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00b      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a2b      	ldr	r2, [pc, #172]	@ (8001910 <TIM_Base_SetConfig+0x14c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a2a      	ldr	r2, [pc, #168]	@ (8001914 <TIM_Base_SetConfig+0x150>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d003      	beq.n	8001876 <TIM_Base_SetConfig+0xb2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <TIM_Base_SetConfig+0x154>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d108      	bne.n	8001888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800187c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a10      	ldr	r2, [pc, #64]	@ (80018f0 <TIM_Base_SetConfig+0x12c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d003      	beq.n	80018bc <TIM_Base_SetConfig+0xf8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <TIM_Base_SetConfig+0x13c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d103      	bne.n	80018c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f023 0201 	bic.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
  }
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40000400 	.word	0x40000400
 80018f8:	40000800 	.word	0x40000800
 80018fc:	40000c00 	.word	0x40000c00
 8001900:	40010400 	.word	0x40010400
 8001904:	40014000 	.word	0x40014000
 8001908:	40014400 	.word	0x40014400
 800190c:	40014800 	.word	0x40014800
 8001910:	40001800 	.word	0x40001800
 8001914:	40001c00 	.word	0x40001c00
 8001918:	40002000 	.word	0x40002000

0800191c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f103 0208 	add.w	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f103 0208 	add.w	r2, r3, #8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0208 	add.w	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6892      	ldr	r2, [r2, #8]
 80019fc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6852      	ldr	r2, [r2, #4]
 8001a06:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d103      	bne.n	8001a1a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b08c      	sub	sp, #48	@ 0x30
 8001a3e:	af04      	add	r7, sp, #16
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fc84 	bl	800235c <pvPortMalloc>
 8001a54:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a5c:	2058      	movs	r0, #88	@ 0x58
 8001a5e:	f000 fc7d 	bl	800235c <pvPortMalloc>
 8001a62:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a70:	e005      	b.n	8001a7e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f000 fd54 	bl	8002520 <vPortFree>
 8001a78:	e001      	b.n	8001a7e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f80e 	bl	8001abc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001aa0:	69f8      	ldr	r0, [r7, #28]
 8001aa2:	f000 f8a3 	bl	8001bec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e002      	b.n	8001ab2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
    }
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001acc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	21a5      	movs	r1, #165	@ 0xa5
 8001ad6:	f000 fe43 	bl	8002760 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f023 0307 	bic.w	r3, r3, #7
 8001af2:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	617b      	str	r3, [r7, #20]
    }
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	e7fd      	b.n	8001b12 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01f      	beq.n	8001b5c <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e012      	b.n	8001b48 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	4413      	add	r3, r2
 8001b28:	7819      	ldrb	r1, [r3, #0]
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	3334      	adds	r3, #52	@ 0x34
 8001b32:	460a      	mov	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d9e9      	bls.n	8001b22 <prvInitialiseNewTask+0x66>
 8001b4e:	e000      	b.n	8001b52 <prvInitialiseNewTask+0x96>
            {
                break;
 8001b50:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001b5a:	e003      	b.n	8001b64 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d901      	bls.n	8001b6e <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b78:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b82:	3304      	adds	r3, #4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fefd 	bl	8001984 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fef8 	bl	8001984 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b98:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9c:	f1c3 0205 	rsb	r2, r3, #5
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bac:	3350      	adds	r3, #80	@ 0x50
 8001bae:	2204      	movs	r2, #4
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fdd4 	bl	8002760 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bba:	3354      	adds	r3, #84	@ 0x54
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fdcd 	bl	8002760 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	69b8      	ldr	r0, [r7, #24]
 8001bcc:	f000 fa9a 	bl	8002104 <pxPortInitialiseStack>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001bf4:	f000 fb00 	bl	80021f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8001cac <prvAddNewTaskToReadyList+0xc0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8001cac <prvAddNewTaskToReadyList+0xc0>)
 8001c00:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <prvAddNewTaskToReadyList+0xc4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c0a:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <prvAddNewTaskToReadyList+0xc4>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <prvAddNewTaskToReadyList+0xc0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d110      	bne.n	8001c3a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c18:	f000 fa18 	bl	800204c <prvInitialiseTaskLists>
 8001c1c:	e00d      	b.n	8001c3a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <prvAddNewTaskToReadyList+0xc8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <prvAddNewTaskToReadyList+0xc4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d802      	bhi.n	8001c3a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c34:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <prvAddNewTaskToReadyList+0xc4>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <prvAddNewTaskToReadyList+0xcc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <prvAddNewTaskToReadyList+0xcc>)
 8001c42:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <prvAddNewTaskToReadyList+0xcc>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2201      	movs	r2, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <prvAddNewTaskToReadyList+0xd0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	4a18      	ldr	r2, [pc, #96]	@ (8001cbc <prvAddNewTaskToReadyList+0xd0>)
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4a15      	ldr	r2, [pc, #84]	@ (8001cc0 <prvAddNewTaskToReadyList+0xd4>)
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff fe92 	bl	800199e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c7a:	f000 faef 	bl	800225c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <prvAddNewTaskToReadyList+0xc8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00e      	beq.n	8001ca4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <prvAddNewTaskToReadyList+0xc4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <prvAddNewTaskToReadyList+0xd8>)
 8001c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000014c 	.word	0x2000014c
 8001cb0:	20000078 	.word	0x20000078
 8001cb4:	20000158 	.word	0x20000158
 8001cb8:	20000168 	.word	0x20000168
 8001cbc:	20000154 	.word	0x20000154
 8001cc0:	2000007c 	.word	0x2000007c
 8001cc4:	e000ed04 	.word	0xe000ed04

08001cc8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <vTaskSuspendAll+0x18>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a03      	ldr	r2, [pc, #12]	@ (8001ce0 <vTaskSuspendAll+0x18>)
 8001cd4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20000170 	.word	0x20000170

08001ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001cf2:	4b42      	ldr	r3, [pc, #264]	@ (8001dfc <xTaskResumeAll+0x118>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10b      	bne.n	8001d12 <xTaskResumeAll+0x2e>
        __asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	603b      	str	r3, [r7, #0]
    }
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001d12:	f000 fa71 	bl	80021f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001d16:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <xTaskResumeAll+0x118>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	4a37      	ldr	r2, [pc, #220]	@ (8001dfc <xTaskResumeAll+0x118>)
 8001d1e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d20:	4b36      	ldr	r3, [pc, #216]	@ (8001dfc <xTaskResumeAll+0x118>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d161      	bne.n	8001dec <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <xTaskResumeAll+0x11c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05d      	beq.n	8001dec <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d30:	e02e      	b.n	8001d90 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d32:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <xTaskResumeAll+0x120>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe51 	bl	80019e6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fe4c 	bl	80019e6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	2201      	movs	r2, #1
 8001d54:	409a      	lsls	r2, r3
 8001d56:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <xTaskResumeAll+0x124>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e08 <xTaskResumeAll+0x124>)
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <xTaskResumeAll+0x128>)
 8001d6e:	441a      	add	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff fe11 	bl	800199e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <xTaskResumeAll+0x12c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <xTaskResumeAll+0x130>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <xTaskResumeAll+0x120>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1cc      	bne.n	8001d32 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d9e:	f000 f995 	bl	80020cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <xTaskResumeAll+0x134>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001dae:	f000 f837 	bl	8001e20 <xTaskIncrementTick>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <xTaskResumeAll+0x130>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f1      	bne.n	8001dae <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <xTaskResumeAll+0x134>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <xTaskResumeAll+0x130>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <xTaskResumeAll+0x138>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001dec:	f000 fa36 	bl	800225c <vPortExitCritical>

    return xAlreadyYielded;
 8001df0:	68bb      	ldr	r3, [r7, #8]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000170 	.word	0x20000170
 8001e00:	2000014c 	.word	0x2000014c
 8001e04:	20000110 	.word	0x20000110
 8001e08:	20000154 	.word	0x20000154
 8001e0c:	2000007c 	.word	0x2000007c
 8001e10:	20000078 	.word	0x20000078
 8001e14:	20000160 	.word	0x20000160
 8001e18:	2000015c 	.word	0x2000015c
 8001e1c:	e000ed04 	.word	0xe000ed04

08001e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <xTaskIncrementTick+0x148>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 808f 	bne.w	8001f52 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e34:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <xTaskIncrementTick+0x14c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f6c <xTaskIncrementTick+0x14c>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d121      	bne.n	8001e8c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e48:	4b49      	ldr	r3, [pc, #292]	@ (8001f70 <xTaskIncrementTick+0x150>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <xTaskIncrementTick+0x4a>
        __asm volatile
 8001e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e56:	f383 8811 	msr	BASEPRI, r3
 8001e5a:	f3bf 8f6f 	isb	sy
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	603b      	str	r3, [r7, #0]
    }
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <xTaskIncrementTick+0x46>
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <xTaskIncrementTick+0x150>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <xTaskIncrementTick+0x154>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3e      	ldr	r2, [pc, #248]	@ (8001f70 <xTaskIncrementTick+0x150>)
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4a3e      	ldr	r2, [pc, #248]	@ (8001f74 <xTaskIncrementTick+0x154>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <xTaskIncrementTick+0x158>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a3c      	ldr	r2, [pc, #240]	@ (8001f78 <xTaskIncrementTick+0x158>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	f000 f920 	bl	80020cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <xTaskIncrementTick+0x15c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d348      	bcc.n	8001f28 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e96:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <xTaskIncrementTick+0x150>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <xTaskIncrementTick+0x15c>)
 8001ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea6:	601a      	str	r2, [r3, #0]
                    break;
 8001ea8:	e03e      	b.n	8001f28 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eaa:	4b31      	ldr	r3, [pc, #196]	@ (8001f70 <xTaskIncrementTick+0x150>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d203      	bcs.n	8001eca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f7c <xTaskIncrementTick+0x15c>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ec8:	e02e      	b.n	8001f28 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fd89 	bl	80019e6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	3318      	adds	r3, #24
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fd80 	bl	80019e6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <xTaskIncrementTick+0x160>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <xTaskIncrementTick+0x160>)
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4a1f      	ldr	r2, [pc, #124]	@ (8001f84 <xTaskIncrementTick+0x164>)
 8001f06:	441a      	add	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f7ff fd45 	bl	800199e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <xTaskIncrementTick+0x168>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3b9      	bcc.n	8001e96 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f26:	e7b6      	b.n	8001e96 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <xTaskIncrementTick+0x168>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2e:	4915      	ldr	r1, [pc, #84]	@ (8001f84 <xTaskIncrementTick+0x164>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d901      	bls.n	8001f44 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <xTaskIncrementTick+0x16c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e004      	b.n	8001f5c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <xTaskIncrementTick+0x170>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <xTaskIncrementTick+0x170>)
 8001f5a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001f5c:	697b      	ldr	r3, [r7, #20]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000170 	.word	0x20000170
 8001f6c:	20000150 	.word	0x20000150
 8001f70:	20000108 	.word	0x20000108
 8001f74:	2000010c 	.word	0x2000010c
 8001f78:	20000164 	.word	0x20000164
 8001f7c:	2000016c 	.word	0x2000016c
 8001f80:	20000154 	.word	0x20000154
 8001f84:	2000007c 	.word	0x2000007c
 8001f88:	20000078 	.word	0x20000078
 8001f8c:	20000160 	.word	0x20000160
 8001f90:	2000015c 	.word	0x2000015c

08001f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f9a:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <vTaskSwitchContext+0xa4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <vTaskSwitchContext+0xa8>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001fa8:	e040      	b.n	800202c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <vTaskSwitchContext+0xa8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <vTaskSwitchContext+0xac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f1c3 031f 	rsb	r3, r3, #31
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	491f      	ldr	r1, [pc, #124]	@ (8002044 <vTaskSwitchContext+0xb0>)
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <vTaskSwitchContext+0x5e>
        __asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	607b      	str	r3, [r7, #4]
    }
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <vTaskSwitchContext+0x5a>
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <vTaskSwitchContext+0xb0>)
 8001ffe:	4413      	add	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	3308      	adds	r3, #8
 8002014:	429a      	cmp	r2, r3
 8002016:	d104      	bne.n	8002022 <vTaskSwitchContext+0x8e>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <vTaskSwitchContext+0xb4>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000170 	.word	0x20000170
 800203c:	20000160 	.word	0x20000160
 8002040:	20000154 	.word	0x20000154
 8002044:	2000007c 	.word	0x2000007c
 8002048:	20000078 	.word	0x20000078

0800204c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e00c      	b.n	8002072 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <prvInitialiseTaskLists+0x60>)
 8002064:	4413      	add	r3, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc6c 	bl	8001944 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d9ef      	bls.n	8002058 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002078:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <prvInitialiseTaskLists+0x64>)
 800207a:	f7ff fc63 	bl	8001944 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <prvInitialiseTaskLists+0x68>)
 8002080:	f7ff fc60 	bl	8001944 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <prvInitialiseTaskLists+0x6c>)
 8002086:	f7ff fc5d 	bl	8001944 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800208a:	480c      	ldr	r0, [pc, #48]	@ (80020bc <prvInitialiseTaskLists+0x70>)
 800208c:	f7ff fc5a 	bl	8001944 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002090:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <prvInitialiseTaskLists+0x74>)
 8002092:	f7ff fc57 	bl	8001944 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <prvInitialiseTaskLists+0x78>)
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <prvInitialiseTaskLists+0x64>)
 800209a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <prvInitialiseTaskLists+0x7c>)
 800209e:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <prvInitialiseTaskLists+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000007c 	.word	0x2000007c
 80020b0:	200000e0 	.word	0x200000e0
 80020b4:	200000f4 	.word	0x200000f4
 80020b8:	20000110 	.word	0x20000110
 80020bc:	20000124 	.word	0x20000124
 80020c0:	20000138 	.word	0x20000138
 80020c4:	20000108 	.word	0x20000108
 80020c8:	2000010c 	.word	0x2000010c

080020cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <prvResetNextTaskUnblockTime+0x30>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <prvResetNextTaskUnblockTime+0x34>)
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020e2:	e005      	b.n	80020f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <prvResetNextTaskUnblockTime+0x30>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <prvResetNextTaskUnblockTime+0x34>)
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000108 	.word	0x20000108
 8002100:	2000016c 	.word	0x2000016c

08002104 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3b04      	subs	r3, #4
 8002114:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800211c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3b04      	subs	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f023 0201 	bic.w	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3b04      	subs	r3, #4
 8002132:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002134:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <pxPortInitialiseStack+0x64>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3b14      	subs	r3, #20
 800213e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b04      	subs	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f06f 0202 	mvn.w	r2, #2
 8002152:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3b20      	subs	r3, #32
 8002158:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	0800216d 	.word	0x0800216d

0800216c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <prvTaskExitError+0x58>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d00b      	beq.n	8002198 <prvTaskExitError+0x2c>
        __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	60fb      	str	r3, [r7, #12]
    }
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <prvTaskExitError+0x28>
        __asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	60bb      	str	r3, [r7, #8]
    }
 80021aa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80021ac:	bf00      	nop
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0fc      	beq.n	80021ae <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c
	...

080021d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <pxCurrentTCBConst2>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	6808      	ldr	r0, [r1, #0]
 80021d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021da:	f380 8809 	msr	PSP, r0
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f380 8811 	msr	BASEPRI, r0
 80021ea:	4770      	bx	lr
 80021ec:	f3af 8000 	nop.w

080021f0 <pxCurrentTCBConst2>:
 80021f0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop

080021f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
        __asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	607b      	str	r3, [r7, #4]
    }
 8002210:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <vPortEnterCritical+0x5c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a0e      	ldr	r2, [pc, #56]	@ (8002254 <vPortEnterCritical+0x5c>)
 800221a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800221c:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <vPortEnterCritical+0x5c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d110      	bne.n	8002246 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <vPortEnterCritical+0x60>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <vPortEnterCritical+0x4e>
        __asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	603b      	str	r3, [r7, #0]
    }
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <vPortEnterCritical+0x4a>
    }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000000c 	.word	0x2000000c
 8002258:	e000ed04 	.word	0xe000ed04

0800225c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <vPortExitCritical+0x50>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <vPortExitCritical+0x26>
        __asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	607b      	str	r3, [r7, #4]
    }
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	e7fd      	b.n	800227e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <vPortExitCritical+0x50>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <vPortExitCritical+0x50>)
 800228a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <vPortExitCritical+0x50>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <vPortExitCritical+0x44>
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800229e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	2000000c 	.word	0x2000000c

080022b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80022b0:	f3ef 8009 	mrs	r0, PSP
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <pxCurrentTCBConst>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f01e 0f10 	tst.w	lr, #16
 80022c0:	bf08      	it	eq
 80022c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80022c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ca:	6010      	str	r0, [r2, #0]
 80022cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80022d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80022d4:	f380 8811 	msr	BASEPRI, r0
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f7ff fe58 	bl	8001f94 <vTaskSwitchContext>
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f380 8811 	msr	BASEPRI, r0
 80022ec:	bc09      	pop	{r0, r3}
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	6808      	ldr	r0, [r1, #0]
 80022f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f6:	f01e 0f10 	tst.w	lr, #16
 80022fa:	bf08      	it	eq
 80022fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002300:	f380 8809 	msr	PSP, r0
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w

08002310 <pxCurrentTCBConst>:
 8002310:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop

08002318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
        __asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	607b      	str	r3, [r7, #4]
    }
 8002330:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002332:	f7ff fd75 	bl	8001e20 <xTaskIncrementTick>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <SysTick_Handler+0x40>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f383 8811 	msr	BASEPRI, r3
    }
 800234e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002368:	f7ff fcae 	bl	8001cc8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <pvPortMalloc+0x1ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002374:	f000 f938 	bl	80025e8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002378:	4b64      	ldr	r3, [pc, #400]	@ (800250c <pvPortMalloc+0x1b0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 80a9 	bne.w	80024d8 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02e      	beq.n	80023ea <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800238c:	2208      	movs	r2, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d228      	bcs.n	80023ea <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8002398:	2208      	movs	r2, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d022      	beq.n	80023f0 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f023 0307 	bic.w	r3, r3, #7
 80023b0:	3308      	adds	r3, #8
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d215      	bcs.n	80023e4 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f023 0307 	bic.w	r3, r3, #7
 80023be:	3308      	adds	r3, #8
 80023c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <pvPortMalloc+0x94>
        __asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	617b      	str	r3, [r7, #20]
    }
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023e8:	e002      	b.n	80023f0 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	e000      	b.n	80023f2 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023f0:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d06f      	beq.n	80024d8 <pvPortMalloc+0x17c>
 80023f8:	4b45      	ldr	r3, [pc, #276]	@ (8002510 <pvPortMalloc+0x1b4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d86a      	bhi.n	80024d8 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <pvPortMalloc+0x1b8>)
 8002404:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002406:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <pvPortMalloc+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800240c:	e004      	b.n	8002418 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d903      	bls.n	800242a <pvPortMalloc+0xce>
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f1      	bne.n	800240e <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800242a:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <pvPortMalloc+0x1ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002430:	429a      	cmp	r2, r3
 8002432:	d051      	beq.n	80024d8 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1ad2      	subs	r2, r2, r3
 800244e:	2308      	movs	r3, #8
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	429a      	cmp	r2, r3
 8002454:	d920      	bls.n	8002498 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <pvPortMalloc+0x124>
        __asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	613b      	str	r3, [r7, #16]
    }
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002492:	69b8      	ldr	r0, [r7, #24]
 8002494:	f000 f90a 	bl	80026ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <pvPortMalloc+0x1b4>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <pvPortMalloc+0x1b4>)
 80024a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <pvPortMalloc+0x1b4>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <pvPortMalloc+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d203      	bcs.n	80024ba <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <pvPortMalloc+0x1b4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a18      	ldr	r2, [pc, #96]	@ (8002518 <pvPortMalloc+0x1bc>)
 80024b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <pvPortMalloc+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <pvPortMalloc+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a11      	ldr	r2, [pc, #68]	@ (800251c <pvPortMalloc+0x1c0>)
 80024d6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80024d8:	f7ff fc04 	bl	8001ce4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <pvPortMalloc+0x1a2>
        __asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	60fb      	str	r3, [r7, #12]
    }
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	e7fd      	b.n	80024fa <pvPortMalloc+0x19e>
    return pvReturn;
 80024fe:	69fb      	ldr	r3, [r7, #28]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20012d7c 	.word	0x20012d7c
 800250c:	20012d90 	.word	0x20012d90
 8002510:	20012d80 	.word	0x20012d80
 8002514:	20012d74 	.word	0x20012d74
 8002518:	20012d84 	.word	0x20012d84
 800251c:	20012d88 	.word	0x20012d88

08002520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d04f      	beq.n	80025d2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002532:	2308      	movs	r3, #8
 8002534:	425b      	negs	r3, r3
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <vPortFree+0xbc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <vPortFree+0x46>
        __asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	60fb      	str	r3, [r7, #12]
    }
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	e7fd      	b.n	8002562 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <vPortFree+0x66>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	60bb      	str	r3, [r7, #8]
    }
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <vPortFree+0xbc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01e      	beq.n	80025d2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11a      	bne.n	80025d2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <vPortFree+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80025ac:	f7ff fb8c 	bl	8001cc8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <vPortFree+0xc0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <vPortFree+0xc0>)
 80025bc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025be:	6938      	ldr	r0, [r7, #16]
 80025c0:	f000 f874 	bl	80026ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <vPortFree+0xc4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a06      	ldr	r2, [pc, #24]	@ (80025e4 <vPortFree+0xc4>)
 80025cc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80025ce:	f7ff fb89 	bl	8001ce4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20012d90 	.word	0x20012d90
 80025e0:	20012d80 	.word	0x20012d80
 80025e4:	20012d8c 	.word	0x20012d8c

080025e8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025ee:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80025f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80025f4:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <prvHeapInit+0xac>)
 80025f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3307      	adds	r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4a1f      	ldr	r2, [pc, #124]	@ (8002694 <prvHeapInit+0xac>)
 8002618:	4413      	add	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <prvHeapInit+0xb0>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002626:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <prvHeapInit+0xb0>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002634:	2208      	movs	r2, #8
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0307 	bic.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a15      	ldr	r2, [pc, #84]	@ (800269c <prvHeapInit+0xb4>)
 8002648:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <prvHeapInit+0xb4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002652:	4b12      	ldr	r3, [pc, #72]	@ (800269c <prvHeapInit+0xb4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <prvHeapInit+0xb4>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <prvHeapInit+0xb8>)
 8002676:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <prvHeapInit+0xbc>)
 800267e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <prvHeapInit+0xc0>)
 8002682:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	20000174 	.word	0x20000174
 8002698:	20012d74 	.word	0x20012d74
 800269c:	20012d7c 	.word	0x20012d7c
 80026a0:	20012d84 	.word	0x20012d84
 80026a4:	20012d80 	.word	0x20012d80
 80026a8:	20012d90 	.word	0x20012d90

080026ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <prvInsertBlockIntoFreeList+0xac>)
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e002      	b.n	80026c0 <prvInsertBlockIntoFreeList+0x14>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d8f7      	bhi.n	80026ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d108      	bne.n	80026ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	441a      	add	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	441a      	add	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d118      	bne.n	8002734 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <prvInsertBlockIntoFreeList+0xb0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d00d      	beq.n	800272a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e008      	b.n	800273c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <prvInsertBlockIntoFreeList+0xb0>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e003      	b.n	800273c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d002      	beq.n	800274a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20012d74 	.word	0x20012d74
 800275c:	20012d7c 	.word	0x20012d7c

08002760 <memset>:
 8002760:	4402      	add	r2, r0
 8002762:	4603      	mov	r3, r0
 8002764:	4293      	cmp	r3, r2
 8002766:	d100      	bne.n	800276a <memset+0xa>
 8002768:	4770      	bx	lr
 800276a:	f803 1b01 	strb.w	r1, [r3], #1
 800276e:	e7f9      	b.n	8002764 <memset+0x4>

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	4d0d      	ldr	r5, [pc, #52]	@ (80027a8 <__libc_init_array+0x38>)
 8002774:	4c0d      	ldr	r4, [pc, #52]	@ (80027ac <__libc_init_array+0x3c>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	2600      	movs	r6, #0
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	4d0b      	ldr	r5, [pc, #44]	@ (80027b0 <__libc_init_array+0x40>)
 8002782:	4c0c      	ldr	r4, [pc, #48]	@ (80027b4 <__libc_init_array+0x44>)
 8002784:	f000 f818 	bl	80027b8 <_init>
 8002788:	1b64      	subs	r4, r4, r5
 800278a:	10a4      	asrs	r4, r4, #2
 800278c:	2600      	movs	r6, #0
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	f855 3b04 	ldr.w	r3, [r5], #4
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08002828 	.word	0x08002828
 80027ac:	08002828 	.word	0x08002828
 80027b0:	08002828 	.word	0x08002828
 80027b4:	0800282c 	.word	0x0800282c

080027b8 <_init>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr

080027c4 <_fini>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr
